/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/attribute_groups": {
    /** Retrieve a list of  attribute  groups. */
    get: operations["getAttribute GroupCollection"];
    /** Create an attribute group. */
    post: operations["postAttribute GroupCollection"];
    parameters: {};
  };
  "/api/attribute_groups/{id}": {
    /** Retrieve an attribute group. */
    get: operations["getAttribute GroupItem"];
    /** Update an attribute group. */
    put: operations["putAttribute GroupItem"];
    /** Delete an attribute group. */
    delete: operations["deleteAttribute GroupItem"];
    parameters: {};
  };
  "/api/attributes_checkbox": {
    /** Retrieve a list of global yes/no attributes. */
    get: operations["get_checkboxesAttributeCollection"];
    /** Create a global yes/no attribute. */
    post: operations["post_checkboxAttributeCollection"];
    parameters: {};
  };
  "/api/attributes_checkbox/{id}": {
    /** Retrieve a global yes/no attribute. */
    get: operations["get_checkboxAttributeItem"];
    /** Update a global yes/no attribute. */
    put: operations["put_checkboxAttributeItem"];
    /** Delete a global yes/no attribute. */
    delete: operations["delete_checkboxAttributeItem"];
    parameters: {};
  };
  "/api/attributes_hidden": {
    /** Retrieve a list of global hidden attributes. */
    get: operations["get_hiddensAttributeCollection"];
    /** Create a global hidden attribute. */
    post: operations["post_hiddenAttributeCollection"];
    parameters: {};
  };
  "/api/attributes_hidden/{attribute_id}/options": {
    /** Retrieve a list of options from a global hidden attribute. */
    get: operations["get_option_hiddensAttribute OptionCollection"];
    /** Add an option to a global hidden attribute. */
    post: operations["post_option_hiddenAttribute OptionCollection"];
    parameters: {};
  };
  "/api/attributes_hidden/{attribute_id}/options/{id}": {
    /** Retrieve an option from a global hidden attribute. */
    get: operations["get_option_hiddenAttribute OptionItem"];
    /** Update an option of a global hidden attribute. */
    put: operations["put_option_hiddenAttribute OptionItem"];
    /** Delete an option from a global hidden attribute. */
    delete: operations["delete_option_hiddenAttribute OptionItem"];
    parameters: {};
  };
  "/api/attributes_hidden/{id}": {
    /** Retrieve a global hidden attribute. */
    get: operations["get_hiddenAttributeItem"];
    /** Update a global hidden attribute. */
    put: operations["put_hiddenAttributeItem"];
    /** Delete a global hidden attribute. */
    delete: operations["delete_hiddenAttributeItem"];
    parameters: {};
  };
  "/api/attributes_select": {
    /** Retrieve a list of global plain field attributes. */
    get: operations["get_selectsAttributeCollection"];
    /** Create a global plain field attribute. */
    post: operations["post_selectAttributeCollection"];
    parameters: {};
  };
  "/api/attributes_select/{attribute_id}/options": {
    /** Retrieve a list of options from a global plain field attribute. */
    get: operations["get_option_selectsAttribute OptionCollection"];
    /** Add an option to a global plain field attribute. */
    post: operations["post_option_selectAttribute OptionCollection"];
    parameters: {};
  };
  "/api/attributes_select/{attribute_id}/options/{id}": {
    /** Retrieve an option from a global plain field attribute. */
    get: operations["get_option_selectAttribute OptionItem"];
    /** Update an option of a global plain field attribute. */
    put: operations["put_option_selectAttribute OptionItem"];
    /** Delete an option from a global plain field attribute. */
    delete: operations["delete_option_selectAttribute OptionItem"];
    parameters: {};
  };
  "/api/attributes_select/{id}": {
    /** Retrieve a global plain field attribute. */
    get: operations["get_selectAttributeItem"];
    /** Update a global plain field attribute. */
    put: operations["put_selectAttributeItem"];
    /** Delete a global plain field attribute. */
    delete: operations["delete_selectAttributeItem"];
    parameters: {};
  };
  "/api/attributes_text": {
    /** Retrieve a list of global textarea attributes. */
    get: operations["get_textsAttributeCollection"];
    /** Create a global textarea attribute. */
    post: operations["post_textAttributeCollection"];
    parameters: {};
  };
  "/api/attributes_text/{id}": {
    /** Retrieve a global textarea attribute. */
    get: operations["get_textAttributeItem"];
    /** Update a global textarea attribute. */
    put: operations["put_textAttributeItem"];
    /** Delete a global textarea attribute. */
    delete: operations["delete_textAttributeItem"];
    parameters: {};
  };
  "/api/categories": {
    /** Retrieve a list of categories. */
    get: operations["getCategoryCollection"];
    /** Create a  category. */
    post: operations["postCategoryCollection"];
    parameters: {};
  };
  "/api/categories/{category_id}": {
    /** Retrieve a  category. */
    get: operations["getCategoryItem"];
    /** Update a  category. */
    put: operations["putCategoryItem"];
    /** Delete a  category. */
    delete: operations["deleteCategoryItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/banner": {
    /** Retrieve a banner from a category. */
    get: operations["getCategory BannerItem"];
    /** Add a banner to a category. */
    post: operations["postCategory BannerCollection"];
    /** Delete a banner from a category. */
    delete: operations["deleteCategory BannerItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/featured": {
    /** Retrieve a list of featured products from a category. */
    get: operations["get_category_featuredFeatured ProductCollection"];
    /** Add a featured product to a category. */
    post: operations["add_category_featuredFeatured ProductCollection"];
    parameters: {};
  };
  "/api/categories/{category_id}/featured/{product_id}": {
    /** Retrieve a featured product from a category. */
    get: operations["getFeatured ProductItem"];
    /** Delete a featured product from a category. */
    delete: operations["delete_category_featuredFeatured ProductItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/icon": {
    /** Retrieve an icon from a category. */
    get: operations["getCategory IconItem"];
    /** Add an icon to a category. */
    post: operations["postCategory IconCollection"];
    /** Delete an icon from a category. */
    delete: operations["deleteCategory IconItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/move": {
    /** Update a category position in the categories tree. */
    put: operations["moveCategoryItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/products": {
    /** Retrieve a list of products from a category. */
    get: operations["get_category_productsCategoryCollection"];
    /** Add a product to a category. */
    post: operations["add_category_productCategoryCollection"];
    parameters: {};
  };
  "/api/categories/{category_id}/products/{product_id}": {
    /** Delete a product from a category. */
    delete: operations["delete_category_productCategoryItem"];
    parameters: {};
  };
  "/api/categories/{category_id}/stats": {
    /** Retrieve category statistics. */
    get: operations["statsCategoryItem"];
    parameters: {};
  };
  "/api/coupons": {
    /** Retrieve a list of  coupons. */
    get: operations["getCouponCollection"];
    /** Create a  coupon. */
    post: operations["postCouponCollection"];
    parameters: {};
  };
  "/api/coupons/{id}": {
    /** Retrieve a  coupon. */
    get: operations["getCouponItem"];
    /** Update a  coupon. */
    put: operations["putCouponItem"];
    /** Delete a  coupon. */
    delete: operations["deleteCouponItem"];
    parameters: {};
  };
  "/api/custom_product_tabs": {
    /** Retrieve a list of  custom  product  tabs. */
    get: operations["getCustom Product TabCollection"];
    /** Create a  custom  product  tab. */
    post: operations["postCustom Product TabCollection"];
    parameters: {};
  };
  "/api/custom_product_tabs/{id}": {
    /** Retrieve a  custom  product  tab. */
    get: operations["getCustom Product TabItem"];
    /** Update a  custom  product  tab. */
    put: operations["putCustom Product TabItem"];
    /** Delete a  custom  product  tab. */
    delete: operations["deleteCustom Product TabItem"];
    parameters: {};
  };
  "/api/front_page/featured": {
    /** Retrieve a list of featured products from the front page. */
    get: operations["get_front_page_featuredFeatured ProductCollection"];
    /** Add a featured product to the front page. */
    post: operations["add_front_page_featuredFeatured ProductCollection"];
    parameters: {};
  };
  "/api/front_page/featured/{product_id}": {
    /** Delete a featured product from the front page. */
    delete: operations["delete_front_page_featuredFeatured ProductItem"];
    parameters: {};
  };
  "/api/memberships": {
    /** Retrieve a list of  memberships. */
    get: operations["getMembershipCollection"];
    /** Create a  membership. */
    post: operations["postMembershipCollection"];
    parameters: {};
  };
  "/api/memberships/{membership_id}": {
    /** Retrieve a  membership. */
    get: operations["getMembershipItem"];
    /** Update a  membership. */
    put: operations["putMembershipItem"];
    /** Delete a  membership. */
    delete: operations["deleteMembershipItem"];
    parameters: {};
  };
  "/api/orders": {
    /** Retrieve a list of  orders. */
    get: operations["getOrderCollection"];
    parameters: {};
  };
  "/api/orders/by_number/{orderNumber}": {
    /** Retrieve an order by order number. */
    get: operations["get_by_numberOrderItem"];
    parameters: {};
  };
  "/api/orders/{id}": {
    /** Retrieve an order by order id. */
    get: operations["getOrderItem"];
    parameters: {};
  };
  "/api/orders/{id}/details": {
    /** Retrieve a list of  order  details. */
    get: operations["getOrder DetailCollection"];
    parameters: {};
  };
  "/api/orders/{id}/history": {
    /** Retrieve a list of  order  history  events. */
    get: operations["getOrder History EventCollection"];
    parameters: {};
  };
  "/api/orders/{id}/payment_status": {
    /** Retrieve a  order payment status. */
    get: operations["getOrderPaymentStatusItem"];
    /** Update a  order payment status. */
    put: operations["putOrderPaymentStatusItem"];
    parameters: {};
  };
  "/api/orders/{id}/payment_transactions": {
    /** Retrieve a list of order payment transactions. */
    get: operations["getTransactionCollection"];
    parameters: {};
  };
  "/api/orders/{id}/shipping_status": {
    /** Retrieve a  order shipping status. */
    get: operations["getOrderShippingStatusItem"];
    /** Update a  order shipping status. */
    put: operations["putOrderShippingStatusItem"];
    parameters: {};
  };
  "/api/product_classes": {
    /** Retrieve a list of product classes. */
    get: operations["getProduct ClassCollection"];
    /** Create a  product  class. */
    post: operations["postProduct ClassCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attribute_groups": {
    /** Retrieve a list of attribute groups from a product class. */
    get: operations["product_class_based_get_subresourcesAttribute GroupCollection"];
    /** Add an attribute group to a product class. */
    post: operations["product_class_based_post_subresourcesAttribute GroupCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attribute_groups/{id}": {
    /** Retrieve an attribute group from a product class. */
    get: operations["product_class_based_get_subresourceAttribute GroupItem"];
    /** Update an attribute group of a product class. */
    put: operations["product_class_based_put_subresourceAttribute GroupItem"];
    /** Delete an attribute group from a product class. */
    delete: operations["product_class_based_delete_subresourceAttribute GroupItem"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_checkbox": {
    /** Retrieve a list of product class yes/no attributes. */
    get: operations["product_class_based_get_checkboxesAttributeCollection"];
    /** Add a yes/no attribute to a product class. */
    post: operations["product_class_based_post_checkboxAttributeCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_checkbox/{id}": {
    /** Retrieve a product class yes/no attribute. */
    get: operations["product_class_based_get_checkboxAttributeItem"];
    /** Update a product class yes/no attribute. */
    put: operations["product_class_based_put_checkboxAttributeItem"];
    /** Delete a product class yes/no attribute. */
    delete: operations["product_class_based_delete_checkboxAttributeItem"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_select": {
    /** Retrieve a list of product class plain field attributes. */
    get: operations["product_class_based_get_selectsAttributeCollection"];
    /** Add a plain field attribute to a product class. */
    post: operations["product_class_based_post_selectAttributeCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_select/{attribute_id}/options": {
    /** Retrieve a list of options from a product class plain field attribute. */
    get: operations["product_class_based_get_option_selectsAttribute OptionCollection"];
    /** Add an option to a product class plain field attribute. */
    post: operations["product_class_based_post_option_selectAttribute OptionCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_select/{attribute_id}/options/{id}": {
    /** Retrieve an option from a product class plain field attribute. */
    get: operations["product_class_based_get_option_selectAttribute OptionItem"];
    /** Update an option of a product class plain field attribute. */
    put: operations["product_class_based_put_option_selectAttribute OptionItem"];
    /** Delete an option from a product class plain field attribute. */
    delete: operations["product_class_based_delete_option_selectAttribute OptionItem"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_select/{id}": {
    /** Retrieve a product class plain field attribute. */
    get: operations["product_class_based_get_selectAttributeItem"];
    /** Update a product class plain field attribute. */
    put: operations["product_class_based_put_selectAttributeItem"];
    /** Delete a product class plain field attribute. */
    delete: operations["product_class_based_delete_selectAttributeItem"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_text": {
    /** Retrieve a list of product class textarea attributes. */
    get: operations["product_class_based_get_textsAttributeCollection"];
    /** Add a textarea attribute to a product class. */
    post: operations["product_class_based_post_textAttributeCollection"];
    parameters: {};
  };
  "/api/product_classes/{class_id}/attributes_text/{id}": {
    /** Retrieve a product class textarea attribute. */
    get: operations["product_class_based_get_textAttributeItem"];
    /** Update a product class textarea attribute. */
    put: operations["product_class_based_put_textAttributeItem"];
    /** Delete a product class textarea attribute. */
    delete: operations["product_class_based_delete_textAttributeItem"];
    parameters: {};
  };
  "/api/product_classes/{id}": {
    /** Retrieve a  product  class. */
    get: operations["getProduct ClassItem"];
    /** Update a  product  class. */
    put: operations["putProduct ClassItem"];
    /** Delete a  product  class. */
    delete: operations["deleteProduct ClassItem"];
    parameters: {};
  };
  "/api/product_stickers": {
    /** Retrieve a list of  product  stickers. */
    get: operations["getProduct StickerCollection"];
    /** Create a  product  sticker. */
    post: operations["postProduct StickerCollection"];
    parameters: {};
  };
  "/api/product_stickers/{sticker_id}": {
    /** Retrieve a  product  sticker. */
    get: operations["getProduct StickerItem"];
    /** Update a  product  sticker. */
    put: operations["putProduct StickerItem"];
    /** Delete a  product  sticker. */
    delete: operations["deleteProduct StickerItem"];
    parameters: {};
  };
  "/api/product_tags": {
    /** Retrieve a list of  product  tags. */
    get: operations["getProduct TagCollection"];
    /** Create a  product  tag. */
    post: operations["postProduct TagCollection"];
    parameters: {};
  };
  "/api/product_tags/{id}": {
    /** Retrieve a  product  tag. */
    get: operations["getProduct TagItem"];
    /** Update a  product  tag. */
    put: operations["putProduct TagItem"];
    /** Delete a  product  tag. */
    delete: operations["deleteProduct TagItem"];
    parameters: {};
  };
  "/api/products": {
    /** Retrieve a list of  products. */
    get: operations["getProductCollection"];
    /** Create a  product. */
    post: operations["postProductCollection"];
    parameters: {};
  };
  "/api/products/{product_id}": {
    /** Retrieve a  product. */
    get: operations["getProductItem"];
    /** Update a  product. */
    put: operations["putProductItem"];
    /** Delete a  product. */
    delete: operations["deleteProductItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attachments": {
    /** Retrieve a list of  product  attachments. */
    get: operations["getProduct AttachmentCollection"];
    /** Create a  product  attachment. */
    post: operations["postProduct AttachmentCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attachments/{id}": {
    /** Retrieve a  product  attachment. */
    get: operations["getProduct AttachmentItem"];
    /** Update a  product  attachment. */
    put: operations["putProduct AttachmentItem"];
    /** Delete a  product  attachment. */
    delete: operations["deleteProduct AttachmentItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes/{attribute_id}/property": {
    /** Retrieve a property from a product attribute. */
    get: operations["getAttribute PropertyItem"];
    /** Update a property of a product attribute. */
    put: operations["putAttribute PropertyItem"];
    /** Add a property to a product attribute. */
    post: operations["postAttribute PropertyCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_checkbox": {
    /** Retrieve a list of product-specific yes/no attributes. */
    get: operations["product_based_get_checkboxesAttributeCollection"];
    /** Add a yes/no attribute to a product. */
    post: operations["product_based_post_checkboxAttributeCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_checkbox/{attribute_id}/values": {
    /** Retrieve a list of values from a product yes/no attribute. */
    get: operations["getYes/No Attribute ValueCollection"];
    /** Add a value to a product yes/no attribute. */
    post: operations["postYes/No Attribute ValueCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_checkbox/{attribute_id}/values/{id}": {
    /** Retrieve a value from a product yes/no attribute. */
    get: operations["getYes/No Attribute ValueItem"];
    /** Update a value of a product yes/no attribute. */
    put: operations["putYes/No Attribute ValueItem"];
    /** Delete a value from a product yes/no attribute. */
    delete: operations["deleteYes/No Attribute ValueItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_checkbox/{id}": {
    /** Retrieve a product-specific yes/no attribute. */
    get: operations["product_based_get_checkboxAttributeItem"];
    /** Update a product-specific yes/no attribute. */
    put: operations["product_based_put_checkboxAttributeItem"];
    /** Delete a product-specific yes/no attribute. */
    delete: operations["product_based_delete_checkboxAttributeItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_hidden/{attribute_id}/values": {
    /** Retrieve a value from a product hidden attribute. */
    get: operations["getHidden Attribute ValueItem"];
    /** Update a value of a product hidden attribute. */
    put: operations["putHidden Attribute ValueItem"];
    /** Add a value to a product hidden attribute. */
    post: operations["postHidden Attribute ValueCollection"];
    /** Delete a value from a product hidden attribute. */
    delete: operations["deleteHidden Attribute ValueItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select": {
    /** Retrieve a list of product-specific plain field attributes. */
    get: operations["product_based_get_selectsAttributeCollection"];
    /** Add a plain field attribute to a product. */
    post: operations["product_based_post_selectAttributeCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select/{attribute_id}/options": {
    /** Retrieve a list of options from a product-specific plain field attribute. */
    get: operations["product_based_get_option_selectsAttribute OptionCollection"];
    /** Add an option to a product-specific plain field attribute. */
    post: operations["product_based_post_option_selectAttribute OptionCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select/{attribute_id}/options/{id}": {
    /** Retrieve an option from a product-specific plain field attribute. */
    get: operations["product_based_get_option_selectAttribute OptionItem"];
    /** Update an option of a product-specific plain field attribute. */
    put: operations["product_based_put_option_selectAttribute OptionItem"];
    /** Delete an option from a product-specific plain field attribute. */
    delete: operations["product_based_delete_option_selectAttribute OptionItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select/{attribute_id}/values": {
    /** Retrieve a list of values from a product plain field attribute. */
    get: operations["getPlain Field Attribute ValueCollection"];
    /** Add a value to a product plain field attribute. */
    post: operations["postPlain Field Attribute ValueCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select/{attribute_id}/values/{id}": {
    /** Retrieve a value from a product plain field attribute. */
    get: operations["getPlain Field Attribute ValueItem"];
    /** Update a value of a product plain field attribute. */
    put: operations["putPlain Field Attribute ValueItem"];
    /** Delete a value from a product plain field attribute. */
    delete: operations["deletePlain Field Attribute ValueItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_select/{id}": {
    /** Retrieve a product-specific plain field attribute. */
    get: operations["product_based_get_selectAttributeItem"];
    /** Update a product-specific plain field attribute. */
    put: operations["product_based_put_selectAttributeItem"];
    /** Delete a product-specific plain field attribute. */
    delete: operations["product_based_delete_selectAttributeItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_text": {
    /** Retrieve a list of product-specific textarea attributes. */
    get: operations["product_based_get_textsAttributeCollection"];
    /** Add a textarea attribute to a product. */
    post: operations["product_based_post_textAttributeCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_text/{attribute_id}/values": {
    /** Retrieve a value from a product textarea attribute. */
    get: operations["getTextarea Attribute ValueItem"];
    /** Update a value of a product textarea attribute. */
    put: operations["putTextarea Attribute ValueItem"];
    /** Add a value to a product textarea attribute. */
    post: operations["postTextarea Attribute ValueCollection"];
    /** Delete a value from a product textarea attribute. */
    delete: operations["deleteTextarea Attribute ValueItem"];
    parameters: {};
  };
  "/api/products/{product_id}/attributes_text/{id}": {
    /** Retrieve a product-specific textarea attribute. */
    get: operations["product_based_get_textAttributeItem"];
    /** Update a product-specific textarea attribute. */
    put: operations["product_based_put_textAttributeItem"];
    /** Delete a product-specific textarea attribute. */
    delete: operations["product_based_delete_textAttributeItem"];
    parameters: {};
  };
  "/api/products/{product_id}/images": {
    /** Add an image to a product. */
    post: operations["postProductImageCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/images/{image_id}": {
    /** Retrieve an image from a product. */
    get: operations["getProductImageItem"];
    /** Update the properties of a product image. */
    put: operations["putProductImageItem"];
    /** Delete an image from a product. */
    delete: operations["deleteProductImageItem"];
    parameters: {};
  };
  "/api/products/{product_id}/pin_codes": {
    /** Retrieve a list of product PIN codes. */
    get: operations["getProduct PIN CodeCollection"];
    /** Create a product PIN code. */
    post: operations["postProduct PIN CodeCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/pin_codes/{id}": {
    /** Retrieve a product PIN code. */
    get: operations["getProduct PIN CodeItem"];
    /** Update a product PIN code. */
    put: operations["putProduct PIN CodeItem"];
    /** Delete a product PIN code. */
    delete: operations["deleteProduct PIN CodeItem"];
    parameters: {};
  };
  "/api/products/{product_id}/related_products": {
    /** Retrieve a list of  related  products. */
    get: operations["getRelated ProductCollection"];
    /** Create a  related  product. */
    post: operations["postRelated ProductCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/related_products/{id}": {
    /** Retrieve a  related  product. */
    get: operations["getRelated ProductItem"];
    /** Update a  related  product. */
    put: operations["putRelated ProductItem"];
    /** Delete a  related  product. */
    delete: operations["deleteRelated ProductItem"];
    parameters: {};
  };
  "/api/products/{product_id}/reviews": {
    /** Retrieve a list of  product  reviews. */
    get: operations["getProduct ReviewCollection"];
    /** Create a  product  review. */
    post: operations["postProduct ReviewCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/reviews/{id}": {
    /** Retrieve a  product  review. */
    get: operations["getProduct ReviewItem"];
    /** Update a  product  review. */
    put: operations["putProduct ReviewItem"];
    /** Delete a  product  review. */
    delete: operations["deleteProduct ReviewItem"];
    parameters: {};
  };
  "/api/products/{product_id}/variants": {
    /** Retrieve a list of  product  variants. */
    get: operations["getProduct VariantCollection"];
    /** Create a  product  variant. */
    post: operations["postProduct VariantCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/variants/{id}": {
    /** Retrieve a  product  variant. */
    get: operations["getProduct VariantItem"];
    /** Update a  product  variant. */
    put: operations["putProduct VariantItem"];
    /** Delete a  product  variant. */
    delete: operations["deleteProduct VariantItem"];
    parameters: {};
  };
  "/api/products/{product_id}/variants/{variant_id}/wholesale_prices": {
    /** Retrieve a list of wholesale prices from a product variant. */
    get: operations["getProduct Variant Wholesale PriceCollection"];
    /** Add a wholesale price to a product variant. */
    post: operations["postProduct Variant Wholesale PriceCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/variants/{variant_id}/wholesale_prices/{id}": {
    /** Retrieve a wholesale price from a product variant. */
    get: operations["getProduct Variant Wholesale PriceItem"];
    /** Update a wholesale price of a product variant. */
    put: operations["putProduct Variant Wholesale PriceItem"];
    /** Delete a wholesale price from a product variant. */
    delete: operations["deleteProduct Variant Wholesale PriceItem"];
    parameters: {};
  };
  "/api/products/{product_id}/wholesale_prices": {
    /** Retrieve a list of  product  wholesale  prices. */
    get: operations["getProduct Wholesale PriceCollection"];
    /** Create a  product  wholesale  price. */
    post: operations["postProduct Wholesale PriceCollection"];
    parameters: {};
  };
  "/api/products/{product_id}/wholesale_prices/{id}": {
    /** Retrieve a  product  wholesale  price. */
    get: operations["getProduct Wholesale PriceItem"];
    /** Update a  product  wholesale  price. */
    put: operations["putProduct Wholesale PriceItem"];
    /** Delete a  product  wholesale  price. */
    delete: operations["deleteProduct Wholesale PriceItem"];
    parameters: {};
  };
  "/api/profiles": {
    /** Retrieve a list of  profiles. */
    get: operations["getProfileCollection"];
    /** Create a  profile. */
    post: operations["postProfileCollection"];
    parameters: {};
  };
  "/api/profiles/{profile_id}": {
    /** Retrieve a  profile. */
    get: operations["getProfileItem"];
    /** Update a  profile. */
    put: operations["putProfileItem"];
    /** Delete a  profile. */
    delete: operations["deleteProfileItem"];
    parameters: {};
  };
  "/api/profiles/{profile_id}/addresses": {
    /** Retrieve a list of addresses from a profile. */
    get: operations["getAddressCollection"];
    /** Add an address to a profile. */
    post: operations["postAddressCollection"];
    parameters: {};
  };
  "/api/profiles/{profile_id}/addresses/{address_id}": {
    /** Retrieve an address from a profile. */
    get: operations["getAddressItem"];
    /** Update an address of a profile. */
    put: operations["putAddressItem"];
    /** Delete an address from a profile. */
    delete: operations["deleteAddressItem"];
    parameters: {};
  };
  "/api/sale_discounts": {
    /** Retrieve a list of  sale  discounts. */
    get: operations["getSale DiscountCollection"];
    /** Create a  sale  discount. */
    post: operations["postSale DiscountCollection"];
    parameters: {};
  };
  "/api/sale_discounts/{id}": {
    /** Retrieve a  sale  discount. */
    get: operations["getSale DiscountItem"];
    /** Update a  sale  discount. */
    put: operations["putSale DiscountItem"];
    /** Delete a  sale  discount. */
    delete: operations["deleteSale DiscountItem"];
    parameters: {};
  };
  "/api/tax_classes": {
    /** Retrieve a list of tax classes. */
    get: operations["getTax ClassCollection"];
    /** Create a  tax  class. */
    post: operations["postTax ClassCollection"];
    parameters: {};
  };
  "/api/tax_classes/{id}": {
    /** Retrieve a  tax  class. */
    get: operations["getTax ClassItem"];
    /** Update a  tax  class. */
    put: operations["putTax ClassItem"];
    /** Delete a  tax  class. */
    delete: operations["deleteTax ClassItem"];
    parameters: {};
  };
  "/api/volume_discounts": {
    /** Retrieve a list of  volume  discounts. */
    get: operations["getVolume DiscountCollection"];
    /** Create a  volume  discount. */
    post: operations["postVolume DiscountCollection"];
    parameters: {};
  };
  "/api/volume_discounts/{id}": {
    /** Retrieve a  volume  discount. */
    get: operations["getVolume DiscountItem"];
    /** Update a  volume  discount. */
    put: operations["putVolume DiscountItem"];
    /** Delete a  volume  discount. */
    delete: operations["deleteVolume DiscountItem"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    "Address.ProfileAddressInput": {
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      /**
       * @default R
       * @example R
       */
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string | null;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldInput"][];
    };
    "Address.ProfileAddressInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      /**
       * @default R
       * @example R
       */
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string | null;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldInput.jsonld"][];
    };
    "Address.ProfileAddressOutput": {
      id?: number;
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldOutput"][];
    };
    "Address.ProfileAddressOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldOutput.jsonld"][];
    };
    "Attribute.AttributeCheckboxInput": {
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeCheckboxInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeCheckboxOutput": {
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeCheckboxOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeHiddenInput": {
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeHiddenInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeHiddenOutput": {
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeHiddenOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeSelectInput": {
      groupId?: number | null;
      position?: number;
      name: string;
      /**
       * @default S
       * @example S
       */
      displayMode: string;
    };
    "Attribute.AttributeSelectInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      groupId?: number | null;
      position?: number;
      name: string;
      /**
       * @default S
       * @example S
       */
      displayMode: string;
    };
    "Attribute.AttributeSelectOutput": {
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeSelectOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeTextInput": {
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeTextInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      groupId?: number | null;
      position?: number;
      name: string;
    };
    "Attribute.AttributeTextOutput": {
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.AttributeTextOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      groupId?: number | null;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.Group.AttributeGroupInput": {
      position?: number;
      name: string;
    };
    "Attribute.Group.AttributeGroupInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      name: string;
    };
    "Attribute.Group.AttributeGroupOutput": {
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.Group.AttributeGroupOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.Option.AttributeOptionHiddenInput": {
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionHiddenInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionHiddenOutput": {
      id?: number;
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionHiddenOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionSelectInput": {
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionSelectInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionSelectOutput": {
      id?: number;
      position?: number;
      value: string;
    };
    "Attribute.Option.AttributeOptionSelectOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      value: string;
    };
    "Attribute.ProductAttributeCheckboxInput": {
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeCheckboxInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeCheckboxOutput": {
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeCheckboxOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeSelectInput": {
      position?: number;
      name: string;
      /**
       * @default S
       * @example S
       */
      displayMode: string;
    };
    "Attribute.ProductAttributeSelectInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      name: string;
      /**
       * @default S
       * @example S
       */
      displayMode: string;
    };
    "Attribute.ProductAttributeSelectOutput": {
      id?: number;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.ProductAttributeSelectOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      name: string;
      displayMode: string;
    };
    "Attribute.ProductAttributeTextInput": {
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeTextInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeTextOutput": {
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.ProductAttributeTextOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      name: string;
    };
    "Attribute.Property.AttributePropertyInput": {
      position?: number;
    };
    "Attribute.Property.AttributePropertyInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
    };
    "Attribute.Property.AttributePropertyOutput": {
      id?: number;
      position?: number;
    };
    "Attribute.Property.AttributePropertyOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
    };
    AttributeOptionHiddenOutput: {
      id?: number;
      position?: number;
      value: string;
    };
    "AttributeOptionHiddenOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      value: string;
    };
    AttributeOptionSelectOutput: {
      id?: number;
      position?: number;
      value: string;
    };
    "AttributeOptionSelectOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      value: string;
    };
    BannerOutput: {
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    "BannerOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Category */
    "Category.Banner.BannerOutput": {
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Category */
    "Category.Banner.BannerOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Category */
    "Category.CategoryMoveInput": {
      parent?: number | null;
      position?: number;
    };
    /** @description Category */
    "Category.CategoryMoveInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      parent?: number | null;
      position?: number;
    };
    /** @description Category */
    "Category.CategoryProductInput": {
      product_id?: number;
    };
    /** @description Category */
    "Category.CategoryProductInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      product_id?: number;
    };
    /** @description Category */
    "Category.CategoryProductOutput": {
      product_id?: number;
    };
    /** @description Category */
    "Category.CategoryProductOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      product_id?: number;
    };
    /** @description Category */
    "Category.CategoryStatsOutput": {
      subcategories_count_all?: number;
      subcategories_count_enabled?: number;
    };
    /** @description Category */
    "Category.CategoryStatsOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      subcategories_count_all?: number;
      subcategories_count_enabled?: number;
    };
    /** @description Category */
    "Category.Icon.IconOutput": {
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Category */
    "Category.Icon.IconOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Category */
    "Category.Input": {
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      og_meta_tags_type?: "A" | "C";
      /** @example */
      og_meta_tags?: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      /**
       * @default true
       * @example true
       */
      show_title?: boolean;
      position?: number;
      /**
       * @example [
       *   "Wholesaler"
       * ]
       */
      memberships?: string[];
      /** @example null */
      parent?: number | null;
      clean_url?: string;
      /** @example Category name */
      name: string;
      /** @example Description */
      description?: string;
      /** @example */
      meta_tags?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      meta_description_type?: "A" | "C";
      /** @example */
      meta_description?: string;
      /** @example */
      meta_title?: string;
    };
    /** @description Category */
    "Category.Input.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      og_meta_tags_type?: "A" | "C";
      /** @example */
      og_meta_tags?: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      /**
       * @default true
       * @example true
       */
      show_title?: boolean;
      position?: number;
      /**
       * @example [
       *   "Wholesaler"
       * ]
       */
      memberships?: string[];
      /** @example null */
      parent?: number | null;
      clean_url?: string;
      /** @example Category name */
      name: string;
      /** @example Description */
      description?: string;
      /** @example */
      meta_tags?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      meta_description_type?: "A" | "C";
      /** @example */
      meta_description?: string;
      /** @example */
      meta_title?: string;
    };
    /** @description Category */
    "Category.Output": {
      og_meta_tags?: string;
      id?: number;
      enabled?: boolean;
      show_title?: boolean;
      position?: number;
      memberships?: components["schemas"]["MembershipOutput"][];
      parent?: number | null;
      clean_url?: string;
      name?: string;
      description?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      icon?: Partial<components["schemas"]["IconOutput"]> | null;
      banner?: Partial<components["schemas"]["BannerOutput"]> | null;
    };
    /** @description Category */
    "Category.Output.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      og_meta_tags?: string;
      id?: number;
      enabled?: boolean;
      show_title?: boolean;
      position?: number;
      memberships?: components["schemas"]["MembershipOutput.jsonld"][];
      parent?: number | null;
      clean_url?: string;
      name?: string;
      description?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      icon?: Partial<components["schemas"]["IconOutput.jsonld"]> | null;
      banner?: Partial<components["schemas"]["BannerOutput.jsonld"]> | null;
    };
    /** @description Coupon */
    "Coupon.CouponInput": {
      abandoned_cart?: number | null;
      abandoned_cart_coupon?: boolean;
      code: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      comment?: string;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      total_range_begin?: number;
      total_range_end?: number;
      uses_limit?: number;
      uses_limit_per_user?: number;
      single_use?: boolean;
      specific_products?: boolean;
      product_classes?: number[];
      memberships?: number[];
      zones?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Coupon */
    "Coupon.CouponInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      abandoned_cart?: number | null;
      abandoned_cart_coupon?: boolean;
      code: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      comment?: string;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      total_range_begin?: number;
      total_range_end?: number;
      uses_limit?: number;
      uses_limit_per_user?: number;
      single_use?: boolean;
      specific_products?: boolean;
      product_classes?: number[];
      memberships?: number[];
      zones?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Coupon */
    "Coupon.CouponOutput": {
      abandoned_cart?: number | null;
      abandoned_cart_coupon?: boolean;
      id: number;
      code: string;
      enabled?: boolean;
      value?: number;
      type: string;
      comment?: string;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      total_range_begin?: number | null;
      total_range_end?: number | null;
      uses_limit?: number | null;
      uses_limit_per_user?: number | null;
      single_use?: boolean;
      specific_products?: boolean;
      product_classes?: number[];
      memberships?: number[];
      zones?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Coupon */
    "Coupon.CouponOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      abandoned_cart?: number | null;
      abandoned_cart_coupon?: boolean;
      id: number;
      code: string;
      enabled?: boolean;
      value?: number;
      type: string;
      comment?: string;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      total_range_begin?: number | null;
      total_range_end?: number | null;
      uses_limit?: number | null;
      uses_limit_per_user?: number | null;
      single_use?: boolean;
      specific_products?: boolean;
      product_classes?: number[];
      memberships?: number[];
      zones?: number[];
      products?: number[];
      categories?: number[];
    };
    "Custom.Product.Tab.Input": {
      name: string;
      content: string;
      brief_info?: string;
    };
    "Custom.Product.Tab.Input.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name: string;
      content: string;
      brief_info?: string;
    };
    "Custom.Product.Tab.Output": {
      id?: number;
      name?: string;
      content?: string;
      brief_info?: string;
    };
    "Custom.Product.Tab.Output.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      content?: string;
      brief_info?: string;
    };
    /** @description Featured Product */
    "Featured.Product.CategoryFeaturedInput": {
      product_id?: number;
    };
    /** @description Featured Product */
    "Featured.Product.CategoryFeaturedInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      product_id?: number;
    };
    /** @description Featured Product */
    "Featured.Product.CategoryFeaturedOutput": {
      product_id?: number;
    };
    /** @description Featured Product */
    "Featured.Product.CategoryFeaturedOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      product_id?: number;
    };
    /** @description Attribute value (hidden) */
    "Hidden.Attribute.Value.AttributeValueHiddenInput": {
      option_id: number;
    };
    /** @description Attribute value (hidden) */
    "Hidden.Attribute.Value.AttributeValueHiddenInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      option_id: number;
    };
    /** @description Attribute value (hidden) */
    "Hidden.Attribute.Value.AttributeValueHiddenOutput": {
      id?: number;
      option: components["schemas"]["AttributeOptionHiddenOutput"];
    };
    /** @description Attribute value (hidden) */
    "Hidden.Attribute.Value.AttributeValueHiddenOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      option: components["schemas"]["AttributeOptionHiddenOutput.jsonld"];
    };
    IconOutput: {
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    "IconOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    ImageInput: {
      alt?: string;
      external_url?: string;
      attachment?: string;
      filename?: string;
    };
    "ImageInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      alt?: string;
      external_url?: string;
      attachment?: string;
      filename?: string;
    };
    ImageOutput: {
      id?: number;
      position?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    "ImageOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Membership */
    "Membership.MembershipInput": {
      /** @example Wholesaler */
      name?: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
    };
    /** @description Membership */
    "Membership.MembershipInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** @example Wholesaler */
      name?: string;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
    };
    /** @description Membership */
    "Membership.MembershipOutput": {
      id?: number;
      name?: string;
      enabled?: boolean;
    };
    /** @description Membership */
    "Membership.MembershipOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      enabled?: boolean;
    };
    MembershipOutput: {
      id?: number;
      name?: string;
      enabled?: boolean;
    };
    "MembershipOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      enabled?: boolean;
    };
    /** @description Order details */
    "Order.Detail.OrderDetailOutput": {
      id?: number;
      name?: string;
      value?: string;
    };
    /** @description Order details */
    "Order.Detail.OrderDetailOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      value?: string;
    };
    /**
     * @description Order history events
     * todo: rename to OrderHistoryEvent
     */
    "Order.History.Event.OrderHistoryOutput": {
      id?: number;
      /** Format: date-time */
      date: string;
      code?: string;
      description?: string;
      data?: string[];
      comment?: string;
      profile_id?: number | null;
      profile_name?: string | null;
      ip?: string;
      details?: components["schemas"]["OrderHistoryDetailOutput"][];
    };
    /**
     * @description Order history events
     * todo: rename to OrderHistoryEvent
     */
    "Order.History.Event.OrderHistoryOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      date: string;
      code?: string;
      description?: string;
      data?: string[];
      comment?: string;
      profile_id?: number | null;
      profile_name?: string | null;
      ip?: string;
      details?: components["schemas"]["OrderHistoryDetailOutput.jsonld"][];
    };
    "Order.OrderOutput": {
      used_coupons?: components["schemas"]["OrderUsedCouponOutput"][];
      usps_shipments?: components["schemas"]["OrderUSPSShipmentOutput"][];
      recovered?: number;
      cart_reminders_sent?: number;
      /** Format: date-time */
      cart_reminder_date?: string | null;
      cart_reminder_emails?: components["schemas"]["OrderAbandonedCartReminderEmailOutput"][];
      cart_recovery_email?: Partial<
        components["schemas"]["OrderAbandonedCartReminderEmailOutput"]
      > | null;
      lost?: number;
      /** Format: date-time */
      last_visit_date?: string | null;
      gross_profit?: number;
      /** Format: date-time */
      survey_future_send_date: string;
      survey?: Partial<
        components["schemas"]["OrderCustomerSatisfactionSurveyOutput"]
      > | null;
      mobile_order?: boolean;
      mailchimp_store_id?: string;
      selected_multi_currency?: string | null;
      selected_multi_currency_rate?: number;
      id?: number;
      order_number: string;
      total?: number;
      sub_total?: number;
      email?: string;
      items?: components["schemas"]["OrderItemOutput"][];
      billing_address?: components["schemas"]["ProfileAddressOutput"];
      shipping_address?: components["schemas"]["ProfileAddressOutput"];
      /** Format: date-time */
      create_date: string;
      /** Format: date-time */
      update_date: string;
      payment_status?: components["schemas"]["OrderPaymentStatusOutput"];
      shipping_status?: components["schemas"]["OrderShippingStatusOutput"];
      customer_id?: number;
      order_profile_id?: number;
      shipping_id?: number | null;
      shipping_method_name?: string;
      notes?: string;
      admin_notes?: string;
      currency?: string;
      stock_status?: string;
      surcharges?: components["schemas"]["OrderSurchargeOutput"][];
      tracking_numbers?: components["schemas"]["OrderTrackingNumberOutput"][];
    };
    "Order.OrderOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      used_coupons?: components["schemas"]["OrderUsedCouponOutput.jsonld"][];
      usps_shipments?: components["schemas"]["OrderUSPSShipmentOutput.jsonld"][];
      recovered?: number;
      cart_reminders_sent?: number;
      /** Format: date-time */
      cart_reminder_date?: string | null;
      cart_reminder_emails?: components["schemas"]["OrderAbandonedCartReminderEmailOutput.jsonld"][];
      cart_recovery_email?: Partial<
        components["schemas"]["OrderAbandonedCartReminderEmailOutput.jsonld"]
      > | null;
      lost?: number;
      /** Format: date-time */
      last_visit_date?: string | null;
      gross_profit?: number;
      /** Format: date-time */
      survey_future_send_date: string;
      survey?: Partial<
        components["schemas"]["OrderCustomerSatisfactionSurveyOutput.jsonld"]
      > | null;
      mobile_order?: boolean;
      mailchimp_store_id?: string;
      selected_multi_currency?: string | null;
      selected_multi_currency_rate?: number;
      id?: number;
      order_number: string;
      total?: number;
      sub_total?: number;
      email?: string;
      items?: components["schemas"]["OrderItemOutput.jsonld"][];
      billing_address?: components["schemas"]["ProfileAddressOutput.jsonld"];
      shipping_address?: components["schemas"]["ProfileAddressOutput.jsonld"];
      /** Format: date-time */
      create_date: string;
      /** Format: date-time */
      update_date: string;
      payment_status?: components["schemas"]["OrderPaymentStatusOutput.jsonld"];
      shipping_status?: components["schemas"]["OrderShippingStatusOutput.jsonld"];
      customer_id?: number;
      order_profile_id?: number;
      shipping_id?: number | null;
      shipping_method_name?: string;
      notes?: string;
      admin_notes?: string;
      currency?: string;
      stock_status?: string;
      surcharges?: components["schemas"]["OrderSurchargeOutput.jsonld"][];
      tracking_numbers?: components["schemas"]["OrderTrackingNumberOutput.jsonld"][];
    };
    OrderAbandonedCartReminderEmailOutput: {
      id?: number;
      /** Format: date-time */
      date_sent?: string | null;
      /** Format: date-time */
      date_clicked: string | null;
      /** Format: date-time */
      date_placed?: string | null;
      /** Format: date-time */
      date_paid?: string | null;
      reminder_id?: number;
    };
    "OrderAbandonedCartReminderEmailOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      date_sent?: string | null;
      /** Format: date-time */
      date_clicked: string | null;
      /** Format: date-time */
      date_placed?: string | null;
      /** Format: date-time */
      date_paid?: string | null;
      reminder_id?: number;
    };
    OrderCustomerSatisfactionSurveyAnswerOutput: {
      id?: number;
      value?: number;
      origin_question?: string;
    };
    "OrderCustomerSatisfactionSurveyAnswerOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      value?: number;
      origin_question?: string;
    };
    OrderCustomerSatisfactionSurveyOutput: {
      id?: number;
      rating?: number | null;
      status: string;
      /** Format: date-time */
      email_date: string | null;
      /** Format: date-time */
      init_date: string;
      /** Format: date-time */
      feedback_date: string | null;
      /** Format: date-time */
      feedback_processed_date: string | null;
      comments?: string;
      customer_message?: string;
      manager_profile_id?: number | null;
      customer_profile_id?: number | null;
      answers?: components["schemas"]["OrderCustomerSatisfactionSurveyAnswerOutput"][];
      tags?: components["schemas"]["OrderCustomerSatisfactionSurveyTagOutput"][];
      hash_key: string;
      filled?: boolean;
    };
    "OrderCustomerSatisfactionSurveyOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      rating?: number | null;
      status: string;
      /** Format: date-time */
      email_date: string | null;
      /** Format: date-time */
      init_date: string;
      /** Format: date-time */
      feedback_date: string | null;
      /** Format: date-time */
      feedback_processed_date: string | null;
      comments?: string;
      customer_message?: string;
      manager_profile_id?: number | null;
      customer_profile_id?: number | null;
      answers?: components["schemas"]["OrderCustomerSatisfactionSurveyAnswerOutput.jsonld"][];
      tags?: components["schemas"]["OrderCustomerSatisfactionSurveyTagOutput.jsonld"][];
      hash_key: string;
      filled?: boolean;
    };
    OrderCustomerSatisfactionSurveyTagOutput: {
      id?: number;
      name: string;
    };
    "OrderCustomerSatisfactionSurveyTagOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name: string;
    };
    OrderHistoryDetailOutput: {
      id?: number;
      name?: string;
      value?: string;
    };
    "OrderHistoryDetailOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      value?: string;
    };
    OrderItemOutput: {
      variant?: number | null;
      id?: number;
      product_id?: number;
      sku?: string;
      /** Format: date-time */
      update_date: string;
      name?: string;
      price?: number;
      item_net_price?: number;
      discounted_subtotal?: number;
      amount?: number;
      backordered_amount?: number;
      surcharges?: components["schemas"]["OrderItemSurchargeOutput"][];
    };
    "OrderItemOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      variant?: number | null;
      id?: number;
      product_id?: number;
      sku?: string;
      /** Format: date-time */
      update_date: string;
      name?: string;
      price?: number;
      item_net_price?: number;
      discounted_subtotal?: number;
      amount?: number;
      backordered_amount?: number;
      surcharges?: components["schemas"]["OrderItemSurchargeOutput.jsonld"][];
    };
    OrderItemSurchargeOutput: {
      id?: number;
      type: string;
      code: string;
      class: string;
      include?: boolean;
      /**
       * @default true
       * @example true
       */
      available?: boolean;
      value?: number;
      name: string;
      weight?: number;
    };
    "OrderItemSurchargeOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      type: string;
      code: string;
      class: string;
      include?: boolean;
      /**
       * @default true
       * @example true
       */
      available?: boolean;
      value?: number;
      name: string;
      weight?: number;
    };
    /** @description Payment status */
    "OrderPaymentStatus.OrderPaymentStatusInput": {
      code: string;
    };
    /** @description Payment status */
    "OrderPaymentStatus.OrderPaymentStatusInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code: string;
    };
    /** @description Payment status */
    "OrderPaymentStatus.OrderPaymentStatusOutput": {
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    /** @description Payment status */
    "OrderPaymentStatus.OrderPaymentStatusOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    OrderPaymentStatusOutput: {
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    "OrderPaymentStatusOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    OrderPaymentTransactionBackendTransactionDataOutput: {
      id?: number;
      name?: string;
      label?: string;
      value?: string;
      access_level: string;
    };
    "OrderPaymentTransactionBackendTransactionDataOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      label?: string;
      value?: string;
      access_level: string;
    };
    OrderPaymentTransactionBackendTransactionOutput: {
      id?: number;
      type?: string;
      /** Format: date-time */
      date: string;
      status: string;
      value?: number;
      data?: components["schemas"]["OrderPaymentTransactionBackendTransactionDataOutput"][];
    };
    "OrderPaymentTransactionBackendTransactionOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      type?: string;
      /** Format: date-time */
      date: string;
      status: string;
      value?: number;
      data?: components["schemas"]["OrderPaymentTransactionBackendTransactionDataOutput.jsonld"][];
    };
    OrderPaymentTransactionDataOutput: {
      id?: number;
      name?: string;
      label?: string;
      value?: string;
      access_level: string;
    };
    "OrderPaymentTransactionDataOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      label?: string;
      value?: string;
      access_level: string;
    };
    /** @description Shipping status */
    "OrderShippingStatus.OrderShippingStatusInput": {
      code: string;
    };
    /** @description Shipping status */
    "OrderShippingStatus.OrderShippingStatusInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code: string;
    };
    /** @description Shipping status */
    "OrderShippingStatus.OrderShippingStatusOutput": {
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    /** @description Shipping status */
    "OrderShippingStatus.OrderShippingStatusOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    OrderShippingStatusOutput: {
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    "OrderShippingStatusOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      name: string;
      customer_name: string;
    };
    OrderSurchargeOutput: {
      id?: number;
      type: string;
      code: string;
      class: string;
      include?: boolean;
      /**
       * @default true
       * @example true
       */
      available?: boolean;
      value?: number;
      name: string;
      weight?: number;
    };
    "OrderSurchargeOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      type: string;
      code: string;
      class: string;
      include?: boolean;
      /**
       * @default true
       * @example true
       */
      available?: boolean;
      value?: number;
      name: string;
      weight?: number;
    };
    OrderTrackingNumberOutput: {
      id?: number;
      /** Format: date-time */
      date: string;
      value?: string;
    };
    "OrderTrackingNumberOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      date: string;
      value?: string;
    };
    OrderUSPSShipmentOutput: {
      id?: number;
      transaction_id: string;
      request_data?: string[];
      response_data?: string[];
      /** Format: date-time */
      print_date: string;
      price?: number;
      shipment_id?: string;
      tracking_number?: string;
      tracking_data?: string[];
      label_url?: string;
      label_content?: string[];
    };
    "OrderUSPSShipmentOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      transaction_id: string;
      request_data?: string[];
      response_data?: string[];
      /** Format: date-time */
      print_date: string;
      price?: number;
      shipment_id?: string;
      tracking_number?: string;
      tracking_data?: string[];
      label_url?: string;
      label_content?: string[];
    };
    OrderUsedCouponOutput: {
      id?: number;
      code: string;
      value?: number;
      type?: string | null;
      coupon_id?: number | null;
    };
    "OrderUsedCouponOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      value?: number;
      type?: string | null;
      coupon_id?: number | null;
    };
    /** @description Attribute value (select) */
    "Plain.Field.Attribute.Value.AttributeValueSelectInput": {
      option_id: number;
      position?: number;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (select) */
    "Plain.Field.Attribute.Value.AttributeValueSelectInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      option_id: number;
      position?: number;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (select) */
    "Plain.Field.Attribute.Value.AttributeValueSelectOutput": {
      id?: number;
      option: components["schemas"]["AttributeOptionSelectOutput"];
      position?: number;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (select) */
    "Plain.Field.Attribute.Value.AttributeValueSelectOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      option: components["schemas"]["AttributeOptionSelectOutput.jsonld"];
      position?: number;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentInput": {
      title: string;
      description?: string;
      position?: number;
      /**
       * @default A
       * @example A
       */
      access: string;
      external_url?: string | null;
      attachment?: string | null;
      filename?: string | null;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      title: string;
      description?: string;
      position?: number;
      /**
       * @default A
       * @example A
       */
      access: string;
      external_url?: string | null;
      attachment?: string | null;
      filename?: string | null;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentOutput": {
      id?: number;
      title: string;
      description: string;
      position?: number;
      access?: string;
      url?: string;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      title: string;
      description: string;
      position?: number;
      access?: string;
      url?: string;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentUpdateInput": {
      title: string;
      description?: string;
      position?: number;
      /**
       * @default A
       * @example A
       */
      access: string;
    };
    /** @description Product attachment */
    "Product.Attachment.ProductAttachmentUpdateInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      title: string;
      description?: string;
      position?: number;
      /**
       * @default A
       * @example A
       */
      access: string;
    };
    /** @description Product class */
    "Product.Class.ProductClassInput": {
      /** @example Apparel */
      name?: string;
    };
    /** @description Product class */
    "Product.Class.ProductClassInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** @example Apparel */
      name?: string;
    };
    /** @description Product class */
    "Product.Class.ProductClassOutput": {
      id?: number;
      name?: string;
    };
    /** @description Product class */
    "Product.Class.ProductClassOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    /** @description The "product" model class */
    "Product.Input": {
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      og_meta_tags_type?: "A" | "C";
      /** @example */
      og_meta_tags?: string;
      market_price?: number;
      pin_codes_enabled?: boolean;
      auto_pin_codes?: boolean;
      participate_sale?: boolean;
      /**
       * @default sale_precent
       * @example sale_precent
       */
      discount_type?: string;
      sale_price_value?: number;
      apply_sale_to_wholesale?: boolean;
      /**
       * @default true
       * @example true
       */
      available_for_backorder?: boolean;
      /** @example 0 */
      backorder_limit?: number;
      /** @example 5.75 */
      cost_price?: number;
      stickers?: number[];
      /**
       * @default true
       * @example true
       */
      facebook_marketing_enabled?: boolean;
      /**
       * @default true
       * @example true
       */
      google_feed_enabled?: boolean;
      /**
       * @example [
       *   "new"
       * ]
       */
      tags?: string[];
      /** @example 0001 */
      sku: string;
      /** @example Product name */
      name: string;
      /** @example Full description */
      description?: string;
      /** @example Description */
      brief_description?: string;
      /** @example */
      meta_tags?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      meta_description_type?: "A" | "C";
      /** @example */
      meta_description?: string;
      /** @example */
      meta_title?: string;
      /** @example 9.99 */
      price?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      /** @example 1.5 */
      weight?: number;
      free_shipping?: boolean;
      /**
       * @default true
       * @example true
       */
      taxable?: boolean;
      /** @example 2021-10-22T00:00:00+00:00 */
      arrival_date?: string | null;
      /**
       * @default true
       * @example true
       */
      inventory_traceable?: boolean;
      /**
       * @default 1000
       * @example 1000
       */
      amount?: number;
      /** @example Fashion */
      product_class?: string | null;
      /** @example VAT */
      tax_class?: string | null;
      /**
       * @example [
       *   "Wholesaler"
       * ]
       */
      memberships?: string[];
      clean_url?: string;
    };
    /** @description The "product" model class */
    "Product.Input.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      og_meta_tags_type?: "A" | "C";
      /** @example */
      og_meta_tags?: string;
      market_price?: number;
      pin_codes_enabled?: boolean;
      auto_pin_codes?: boolean;
      participate_sale?: boolean;
      /**
       * @default sale_precent
       * @example sale_precent
       */
      discount_type?: string;
      sale_price_value?: number;
      apply_sale_to_wholesale?: boolean;
      /**
       * @default true
       * @example true
       */
      available_for_backorder?: boolean;
      /** @example 0 */
      backorder_limit?: number;
      /** @example 5.75 */
      cost_price?: number;
      stickers?: number[];
      /**
       * @default true
       * @example true
       */
      facebook_marketing_enabled?: boolean;
      /**
       * @default true
       * @example true
       */
      google_feed_enabled?: boolean;
      /**
       * @example [
       *   "new"
       * ]
       */
      tags?: string[];
      /** @example 0001 */
      sku: string;
      /** @example Product name */
      name: string;
      /** @example Full description */
      description?: string;
      /** @example Description */
      brief_description?: string;
      /** @example */
      meta_tags?: string;
      /**
       * @default A
       * @example A
       * @enum {string}
       */
      meta_description_type?: "A" | "C";
      /** @example */
      meta_description?: string;
      /** @example */
      meta_title?: string;
      /** @example 9.99 */
      price?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      /** @example 1.5 */
      weight?: number;
      free_shipping?: boolean;
      /**
       * @default true
       * @example true
       */
      taxable?: boolean;
      /** @example 2021-10-22T00:00:00+00:00 */
      arrival_date?: string | null;
      /**
       * @default true
       * @example true
       */
      inventory_traceable?: boolean;
      /**
       * @default 1000
       * @example 1000
       */
      amount?: number;
      /** @example Fashion */
      product_class?: string | null;
      /** @example VAT */
      tax_class?: string | null;
      /**
       * @example [
       *   "Wholesaler"
       * ]
       */
      memberships?: string[];
      clean_url?: string;
    };
    /** @description The "product" model class */
    "Product.Output": {
      og_meta_tags?: string;
      market_price?: number;
      pin_codes_enabled?: boolean;
      auto_pin_codes?: boolean;
      participate_sale?: boolean;
      /**
       * @default sale_precent
       * @example sale_precent
       */
      discount_type?: string;
      sale_price_value?: number;
      apply_sale_to_wholesale?: boolean;
      available_for_backorder?: boolean;
      backorder_limit?: number;
      cost_price?: number;
      stickers?: number[];
      facebook_marketing_enabled?: boolean;
      google_feed_enabled?: boolean;
      tags?: components["schemas"]["TagOutput"][];
      id?: number;
      sku?: string;
      name?: string;
      description?: string;
      brief_description?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      price?: number;
      enabled?: boolean;
      weight?: number;
      free_shipping?: boolean;
      taxable?: boolean;
      create_date?: string;
      update_date?: string;
      arrival_date?: string;
      inventory_traceable?: boolean;
      amount?: number;
      product_class?: Partial<
        components["schemas"]["ProductClassOutput"]
      > | null;
      tax_class?: Partial<components["schemas"]["TaxClassOutput"]> | null;
      memberships?: components["schemas"]["MembershipOutput"][];
      clean_url?: string;
      images?: components["schemas"]["ImageOutput"][];
    };
    /** @description The "product" model class */
    "Product.Output.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      og_meta_tags?: string;
      market_price?: number;
      pin_codes_enabled?: boolean;
      auto_pin_codes?: boolean;
      participate_sale?: boolean;
      /**
       * @default sale_precent
       * @example sale_precent
       */
      discount_type?: string;
      sale_price_value?: number;
      apply_sale_to_wholesale?: boolean;
      available_for_backorder?: boolean;
      backorder_limit?: number;
      cost_price?: number;
      stickers?: number[];
      facebook_marketing_enabled?: boolean;
      google_feed_enabled?: boolean;
      tags?: components["schemas"]["TagOutput.jsonld"][];
      id?: number;
      sku?: string;
      name?: string;
      description?: string;
      brief_description?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      price?: number;
      enabled?: boolean;
      weight?: number;
      free_shipping?: boolean;
      taxable?: boolean;
      create_date?: string;
      update_date?: string;
      arrival_date?: string;
      inventory_traceable?: boolean;
      amount?: number;
      product_class?: Partial<
        components["schemas"]["ProductClassOutput.jsonld"]
      > | null;
      tax_class?: Partial<
        components["schemas"]["TaxClassOutput.jsonld"]
      > | null;
      memberships?: components["schemas"]["MembershipOutput.jsonld"][];
      clean_url?: string;
      images?: components["schemas"]["ImageOutput.jsonld"][];
    };
    /** @description PIN Code */
    "Product.PIN.Code.ProductPINCodeInput": {
      code?: string;
      /** Format: date-time */
      create_date?: string | null;
      is_sold?: boolean;
      is_blocked?: boolean;
      order_item_id?: number | null;
    };
    /** @description PIN Code */
    "Product.PIN.Code.ProductPINCodeInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code?: string;
      /** Format: date-time */
      create_date?: string | null;
      is_sold?: boolean;
      is_blocked?: boolean;
      order_item_id?: number | null;
    };
    /** @description PIN Code */
    "Product.PIN.Code.ProductPINCodeOutput": {
      id?: number;
      code: string;
      /** Format: date-time */
      create_date?: string;
      is_sold?: boolean;
      is_blocked?: boolean;
      order_item_id?: number | null;
    };
    /** @description PIN Code */
    "Product.PIN.Code.ProductPINCodeOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      code: string;
      /** Format: date-time */
      create_date?: string;
      is_sold?: boolean;
      is_blocked?: boolean;
      order_item_id?: number | null;
    };
    /** @description The "review" model class */
    "Product.Review.ProductReviewInput": {
      review?: string;
      response?: string | null;
      /**
       * @default 1
       * @example 1
       */
      rating?: number;
      /** Format: date-time */
      addition_date?: string | null;
      /** Format: date-time */
      response_date?: string | null;
      profile?: number | null;
      respondent?: number | null;
      reviewer_name: string;
      /**
       * @default 1
       * @example 1
       * @enum {integer}
       */
      status?: "0" | "1";
      use_for_meta?: boolean;
    };
    /** @description The "review" model class */
    "Product.Review.ProductReviewInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      review?: string;
      response?: string | null;
      /**
       * @default 1
       * @example 1
       */
      rating?: number;
      /** Format: date-time */
      addition_date?: string | null;
      /** Format: date-time */
      response_date?: string | null;
      profile?: number | null;
      respondent?: number | null;
      reviewer_name: string;
      /**
       * @default 1
       * @example 1
       * @enum {integer}
       */
      status?: "0" | "1";
      use_for_meta?: boolean;
    };
    /** @description The "review" model class */
    "Product.Review.ProductReviewOutput": {
      id?: number;
      review?: string;
      response?: string | null;
      /**
       * @default 1
       * @example 1
       */
      rating?: number;
      /** Format: date-time */
      addition_date?: string;
      /** Format: date-time */
      response_date?: string | null;
      profile?: number | null;
      respondent?: number | null;
      reviewer_name?: string;
      /**
       * @default 1
       * @example 1
       */
      status?: number;
      use_for_meta?: boolean;
    };
    /** @description The "review" model class */
    "Product.Review.ProductReviewOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      review?: string;
      response?: string | null;
      /**
       * @default 1
       * @example 1
       */
      rating?: number;
      /** Format: date-time */
      addition_date?: string;
      /** Format: date-time */
      response_date?: string | null;
      profile?: number | null;
      respondent?: number | null;
      reviewer_name?: string;
      /**
       * @default 1
       * @example 1
       */
      status?: number;
      use_for_meta?: boolean;
    };
    "Product.Sticker.ProductStickerInput": {
      name: string;
      position?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      text_color?: string;
      bg_color?: string;
    };
    "Product.Sticker.ProductStickerInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name: string;
      position?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      text_color?: string;
      bg_color?: string;
    };
    "Product.Sticker.ProductStickerOutput": {
      id?: number;
      name: string;
      position?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      text_color?: string;
      bg_color?: string;
    };
    "Product.Sticker.ProductStickerOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name: string;
      position?: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      text_color?: string;
      bg_color?: string;
    };
    "Product.Tag.TagInput": {
      /** @example sale */
      name?: string;
    };
    "Product.Tag.TagInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** @example sale */
      name?: string;
    };
    "Product.Tag.TagOutput": {
      id?: number;
      name?: string;
    };
    "Product.Tag.TagOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantInput": {
      /**
       * @default sale_percent
       * @example sale_percent
       */
      sale_discount_type?: string;
      sale_price_value?: number;
      cost_price?: number | null;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageInput"]> | null;
      attribute_checkbox_values?: number[];
      attribute_select_values?: number[];
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default sale_percent
       * @example sale_percent
       */
      sale_discount_type?: string;
      sale_price_value?: number;
      cost_price?: number | null;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageInput.jsonld"]> | null;
      attribute_checkbox_values?: number[];
      attribute_select_values?: number[];
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantOutput": {
      sale_discount_type?: string;
      sale_price_value?: number;
      default_sale_price?: boolean;
      cost_price?: number | null;
      id?: number;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageOutput"]> | null;
      attribute_checkbox_values?: number[];
      attribute_select_values?: number[];
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      sale_discount_type?: string;
      sale_price_value?: number;
      default_sale_price?: boolean;
      cost_price?: number | null;
      id?: number;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageOutput.jsonld"]> | null;
      attribute_checkbox_values?: number[];
      attribute_select_values?: number[];
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantUpdate": {
      /**
       * @default sale_percent
       * @example sale_percent
       */
      sale_discount_type?: string;
      sale_price_value?: number;
      cost_price?: number | null;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageInput"]> | null;
    };
    /** @description Product variant */
    "Product.Variant.ProductVariantUpdate.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default sale_percent
       * @example sale_percent
       */
      sale_discount_type?: string;
      sale_price_value?: number;
      cost_price?: number | null;
      price?: number;
      default_price?: boolean;
      amount?: number;
      default_amount?: boolean;
      weight?: number;
      default_weight?: boolean;
      default_variant?: boolean;
      sku?: string | null;
      image?: Partial<components["schemas"]["ImageInput.jsonld"]> | null;
    };
    "Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput": {
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    "Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    "Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput": {
      id?: number;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    "Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    /** @description Wholesale price model (product) */
    "Product.Wholesale.Price.ProductWholesalePriceInput": {
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    /** @description Wholesale price model (product) */
    "Product.Wholesale.Price.ProductWholesalePriceInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    /** @description Wholesale price model (product) */
    "Product.Wholesale.Price.ProductWholesalePriceOutput": {
      id?: number;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    /** @description Wholesale price model (product) */
    "Product.Wholesale.Price.ProductWholesalePriceOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /**
       * @default price
       * @example price
       */
      type?: string;
      price?: number;
      /**
       * @default 2
       * @example 2
       */
      quantity_range_begin?: number;
      membership?: number | null;
    };
    ProductClassOutput: {
      id?: number;
      name?: string;
    };
    "ProductClassOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    /** @description Product image */
    "ProductImage.ImageOutput": {
      id?: number;
      position?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Product image */
    "ProductImage.ImageOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      position?: number;
      alt?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    /** @description Product image */
    "ProductImage.ImageUpdate": {
      position?: number;
      alt?: string;
    };
    /** @description Product image */
    "ProductImage.ImageUpdate.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      position?: number;
      alt?: string;
    };
    /** @description The "profile" model class */
    "Profile.ProfileInput": {
      social_login_provider?: string | null;
      social_login_id?: string | null;
      ga_client_id?: string;
      concierge_user_id?: string | null;
      mail_chimp_lists?: number[];
      mail_chimp_interests?: number[];
      mail_chimp_segments?: number[];
      stripe_customer_id?: string | null;
      /** Format: email */
      login: string;
      password?: string | null;
      access_level?: number;
      /**
       * @default E
       * @example E
       * @enum {string}
       */
      status: "E" | "D";
      status_comment?: string;
      referer?: string;
      language?: string;
      membership_id?: number | null;
      pending_membership_id?: number | null;
      force_change_password?: boolean;
      role_ids?: number[];
    };
    /** @description The "profile" model class */
    "Profile.ProfileInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      social_login_provider?: string | null;
      social_login_id?: string | null;
      ga_client_id?: string;
      concierge_user_id?: string | null;
      mail_chimp_lists?: number[];
      mail_chimp_interests?: number[];
      mail_chimp_segments?: number[];
      stripe_customer_id?: string | null;
      /** Format: email */
      login: string;
      password?: string | null;
      access_level?: number;
      /**
       * @default E
       * @example E
       * @enum {string}
       */
      status: "E" | "D";
      status_comment?: string;
      referer?: string;
      language?: string;
      membership_id?: number | null;
      pending_membership_id?: number | null;
      force_change_password?: boolean;
      role_ids?: number[];
    };
    /** @description The "profile" model class */
    "Profile.ProfileOutput": {
      social_login_provider?: string | null;
      social_login_id?: string | null;
      ga_client_id?: string;
      concierge_user_id?: string | null;
      mail_chimp_lists?: number[];
      mail_chimp_interests?: number[];
      mail_chimp_segments?: number[];
      stripe_customer_id?: string | null;
      id?: number;
      login: string;
      access_level?: number;
      /** Format: date-time */
      create_date: string;
      /** Format: date-time */
      first_login_date?: string | null;
      /** Format: date-time */
      last_login_date?: string | null;
      /**
       * @default E
       * @example E
       */
      status: string;
      status_comment?: string;
      referer?: string;
      language?: string;
      membership_id?: number | null;
      pending_membership_id?: number | null;
      force_change_password?: boolean;
      role_ids?: number[];
    };
    /** @description The "profile" model class */
    "Profile.ProfileOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      social_login_provider?: string | null;
      social_login_id?: string | null;
      ga_client_id?: string;
      concierge_user_id?: string | null;
      mail_chimp_lists?: number[];
      mail_chimp_interests?: number[];
      mail_chimp_segments?: number[];
      stripe_customer_id?: string | null;
      id?: number;
      login: string;
      access_level?: number;
      /** Format: date-time */
      create_date: string;
      /** Format: date-time */
      first_login_date?: string | null;
      /** Format: date-time */
      last_login_date?: string | null;
      /**
       * @default E
       * @example E
       */
      status: string;
      status_comment?: string;
      referer?: string;
      language?: string;
      membership_id?: number | null;
      pending_membership_id?: number | null;
      force_change_password?: boolean;
      role_ids?: number[];
    };
    ProfileAddressCustomFieldInput: {
      name?: string;
      value?: string | null;
    };
    "ProfileAddressCustomFieldInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      value?: string | null;
    };
    ProfileAddressCustomFieldOutput: {
      name?: string;
      value?: string | null;
    };
    "ProfileAddressCustomFieldOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      value?: string | null;
    };
    ProfileAddressOutput: {
      id?: number;
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldOutput"][];
    };
    "ProfileAddressOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      is_billing?: boolean;
      is_shipping?: boolean;
      is_work?: boolean;
      type?: string;
      title?: string;
      firstname?: string;
      lastname?: string;
      phone?: string;
      street?: string;
      zipcode?: string;
      city?: string;
      country_code?: string;
      state?: number | null;
      state_name?: string;
      custom_fields?: components["schemas"]["ProfileAddressCustomFieldOutput.jsonld"][];
    };
    /** @description Upselling Product */
    "Related.Product.ProductUpsellingProductInput": {
      product_id?: number;
      position?: number;
    };
    /** @description Upselling Product */
    "Related.Product.ProductUpsellingProductInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      product_id?: number;
      position?: number;
    };
    /** @description Upselling Product */
    "Related.Product.ProductUpsellingProductOutput": {
      id?: number;
      product_id?: number;
      position?: number;
    };
    /** @description Upselling Product */
    "Related.Product.ProductUpsellingProductOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      product_id?: number;
      position?: number;
    };
    /** @description Sale */
    "Sale.Discount.SaleDiscountInput": {
      use_custom_open_graph?: boolean;
      og_meta?: string | null;
      apply_to_wholesale?: boolean;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      show_in_separate_section?: boolean;
      /**
       * @default A
       * @example A
       */
      meta_description_type?: string;
      specific_products?: boolean;
      name?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      clean_url?: string;
      product_classes?: number[];
      memberships?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Sale */
    "Sale.Discount.SaleDiscountInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      use_custom_open_graph?: boolean;
      og_meta?: string | null;
      apply_to_wholesale?: boolean;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      show_in_separate_section?: boolean;
      /**
       * @default A
       * @example A
       */
      meta_description_type?: string;
      specific_products?: boolean;
      name?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      clean_url?: string;
      product_classes?: number[];
      memberships?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Sale */
    "Sale.Discount.SaleDiscountOutput": {
      use_custom_open_graph?: boolean;
      og_meta?: string | null;
      apply_to_wholesale?: boolean;
      id: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      show_in_separate_section?: boolean;
      /**
       * @default A
       * @example A
       */
      meta_description_type?: string;
      specific_products?: boolean;
      name?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      clean_url?: string;
      product_classes?: number[];
      memberships?: number[];
      products?: number[];
      categories?: number[];
    };
    /** @description Sale */
    "Sale.Discount.SaleDiscountOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      use_custom_open_graph?: boolean;
      og_meta?: string | null;
      apply_to_wholesale?: boolean;
      id: number;
      /**
       * @default true
       * @example true
       */
      enabled?: boolean;
      value?: number;
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
      show_in_separate_section?: boolean;
      /**
       * @default A
       * @example A
       */
      meta_description_type?: string;
      specific_products?: boolean;
      name?: string;
      meta_tags?: string;
      meta_description?: string;
      meta_title?: string;
      clean_url?: string;
      product_classes?: number[];
      memberships?: number[];
      products?: number[];
      categories?: number[];
    };
    TagOutput: {
      id?: number;
      name?: string;
    };
    "TagOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    /** @description Tax class */
    "Tax.Class.TaxClassInput": {
      /** @example Alcohol */
      name?: string;
    };
    /** @description Tax class */
    "Tax.Class.TaxClassInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** @example Alcohol */
      name?: string;
    };
    /** @description Tax class */
    "Tax.Class.TaxClassOutput": {
      id?: number;
      name?: string;
    };
    /** @description Tax class */
    "Tax.Class.TaxClassOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    TaxClassOutput: {
      id?: number;
      name?: string;
    };
    "TaxClassOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    /** @description Attribute value (text) */
    "Textarea.Attribute.Value.AttributeValueTextInput": {
      value?: string;
      editable?: boolean;
    };
    /** @description Attribute value (text) */
    "Textarea.Attribute.Value.AttributeValueTextInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      value?: string;
      editable?: boolean;
    };
    /** @description Attribute value (text) */
    "Textarea.Attribute.Value.AttributeValueTextOutput": {
      id?: number;
      value?: string;
      editable?: boolean;
    };
    /** @description Attribute value (text) */
    "Textarea.Attribute.Value.AttributeValueTextOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      value?: string;
      editable?: boolean;
    };
    /** @description Payment transaction */
    "Transaction.OrderPaymentTransactionOutput": {
      id?: number;
      public_id?: string | null;
      public_txn_id?: string | null;
      method_id?: number | null;
      type: string;
      /** Format: date-time */
      date: string;
      status: string;
      name: string;
      local_name: string;
      currency?: string;
      value?: number;
      note?: string;
      data?: components["schemas"]["OrderPaymentTransactionDataOutput"][];
      backend_transactions?: components["schemas"]["OrderPaymentTransactionBackendTransactionOutput"][];
    };
    /** @description Payment transaction */
    "Transaction.OrderPaymentTransactionOutput.jsonld": {
      "@id"?: string;
      "@type"?: string;
      id?: number;
      public_id?: string | null;
      public_txn_id?: string | null;
      method_id?: number | null;
      type: string;
      /** Format: date-time */
      date: string;
      status: string;
      name: string;
      local_name: string;
      currency?: string;
      value?: number;
      note?: string;
      data?: components["schemas"]["OrderPaymentTransactionDataOutput.jsonld"][];
      backend_transactions?: components["schemas"]["OrderPaymentTransactionBackendTransactionOutput.jsonld"][];
    };
    /** @description Volume discount model */
    "Volume.Discount.VolumeDiscountInput": {
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      subtotal_range_begin?: number | null;
      membership?: number | null;
      zones?: number[];
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
    };
    /** @description Volume discount model */
    "Volume.Discount.VolumeDiscountInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      subtotal_range_begin?: number | null;
      membership?: number | null;
      zones?: number[];
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
    };
    /** @description Volume discount model */
    "Volume.Discount.VolumeDiscountOutput": {
      id: number;
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      subtotal_range_begin?: number | null;
      membership?: number | null;
      zones?: number[];
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
    };
    /** @description Volume discount model */
    "Volume.Discount.VolumeDiscountOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id: number;
      value?: number;
      /**
       * @default %
       * @example %
       */
      type: string;
      subtotal_range_begin?: number | null;
      membership?: number | null;
      zones?: number[];
      /** Format: date-time */
      date_range_begin?: string | null;
      /** Format: date-time */
      date_range_end?: string | null;
    };
    /** @description Attribute value (checkbox) */
    "Yes.No.Attribute.Value.AttributeValueCheckboxInput": {
      value?: boolean;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (checkbox) */
    "Yes.No.Attribute.Value.AttributeValueCheckboxInput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      value?: boolean;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (checkbox) */
    "Yes.No.Attribute.Value.AttributeValueCheckboxOutput": {
      id?: number;
      value?: boolean;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
    /** @description Attribute value (checkbox) */
    "Yes.No.Attribute.Value.AttributeValueCheckboxOutput.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      value?: boolean;
      price_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      price_modifier_type?: string;
      weight_modifier?: number;
      /**
       * @default percent
       * @example percent
       */
      weight_modifier_type?: string;
      is_default?: boolean;
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Retrieve a list of  attribute  groups. */
  "getAttribute GroupCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Group collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"][];
        };
      };
    };
  };
  /** Create an attribute group. */
  "postAttribute GroupCollection": {
    parameters: {};
    responses: {
      /** Attribute Group resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Group resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Group.AttributeGroupInput"];
        "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Group.AttributeGroupInput"];
      };
    };
  };
  /** Retrieve an attribute group. */
  "getAttribute GroupItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Attribute Group resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an attribute group. */
  "putAttribute GroupItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Attribute Group resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Group resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Group.AttributeGroupInput"];
        "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Group.AttributeGroupInput"];
      };
    };
  };
  /** Delete an attribute group. */
  "deleteAttribute GroupItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Attribute Group resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of global yes/no attributes. */
  get_checkboxesAttributeCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"][];
        };
      };
    };
  };
  /** Create a global yes/no attribute. */
  post_checkboxAttributeCollection: {
    parameters: {};
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeCheckboxInput"];
      };
    };
  };
  /** Retrieve a global yes/no attribute. */
  get_checkboxAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a global yes/no attribute. */
  put_checkboxAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeCheckboxInput"];
      };
    };
  };
  /** Delete a global yes/no attribute. */
  delete_checkboxAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of global hidden attributes. */
  get_hiddensAttributeCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeHiddenOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeHiddenOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeHiddenOutput"][];
        };
      };
    };
  };
  /** Create a global hidden attribute. */
  post_hiddenAttributeCollection: {
    parameters: {};
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeHiddenInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeHiddenInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeHiddenInput"];
      };
    };
  };
  /** Retrieve a list of options from a global hidden attribute. */
  "get_option_hiddensAttribute OptionCollection": {
    parameters: {
      path: {
        attribute_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Option collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"][];
        };
      };
    };
  };
  /** Add an option to a global hidden attribute. */
  "post_option_hiddenAttribute OptionCollection": {
    parameters: {
      path: {
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Option resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput"];
      };
    };
  };
  /** Retrieve an option from a global hidden attribute. */
  "get_option_hiddenAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an option of a global hidden attribute. */
  "put_option_hiddenAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionHiddenInput"];
      };
    };
  };
  /** Delete an option from a global hidden attribute. */
  "delete_option_hiddenAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a global hidden attribute. */
  get_hiddenAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeHiddenOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a global hidden attribute. */
  put_hiddenAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeHiddenOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeHiddenInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeHiddenInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeHiddenInput"];
      };
    };
  };
  /** Delete a global hidden attribute. */
  delete_hiddenAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of global plain field attributes. */
  get_selectsAttributeCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"][];
        };
      };
    };
  };
  /** Create a global plain field attribute. */
  post_selectAttributeCollection: {
    parameters: {};
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeSelectInput"];
      };
    };
  };
  /** Retrieve a list of options from a global plain field attribute. */
  "get_option_selectsAttribute OptionCollection": {
    parameters: {
      path: {
        attribute_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Option collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
        };
      };
    };
  };
  /** Add an option to a global plain field attribute. */
  "post_option_selectAttribute OptionCollection": {
    parameters: {
      path: {
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Option resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Retrieve an option from a global plain field attribute. */
  "get_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an option of a global plain field attribute. */
  "put_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Delete an option from a global plain field attribute. */
  "delete_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a global plain field attribute. */
  get_selectAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a global plain field attribute. */
  put_selectAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeSelectInput"];
      };
    };
  };
  /** Delete a global plain field attribute. */
  delete_selectAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of global textarea attributes. */
  get_textsAttributeCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeTextOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"][];
        };
      };
    };
  };
  /** Create a global textarea attribute. */
  post_textAttributeCollection: {
    parameters: {};
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeTextInput"];
      };
    };
  };
  /** Retrieve a global textarea attribute. */
  get_textAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a global textarea attribute. */
  put_textAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeTextInput"];
      };
    };
  };
  /** Delete a global textarea attribute. */
  delete_textAttributeItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of categories. */
  getCategoryCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        parent?: number;
      };
    };
    responses: {
      /** Category collection */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Output"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Category.Output.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Category.Output"][];
        };
      };
    };
  };
  /** Create a  category. */
  postCategoryCollection: {
    parameters: {};
    responses: {
      /** Category resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Category.Output"];
          "application/ld+json": components["schemas"]["Category.Output.jsonld"];
          "text/html": components["schemas"]["Category.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Category resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category.Input"];
        "application/ld+json": components["schemas"]["Category.Input.jsonld"];
        "text/html": components["schemas"]["Category.Input"];
      };
    };
  };
  /** Retrieve a  category. */
  getCategoryItem: {
    parameters: {
      path: {
        /** Resource identifier */
        category_id: string;
      };
    };
    responses: {
      /** Category resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Output"];
          "application/ld+json": components["schemas"]["Category.Output.jsonld"];
          "text/html": components["schemas"]["Category.Output"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  category. */
  putCategoryItem: {
    parameters: {
      path: {
        /** Resource identifier */
        category_id: string;
      };
    };
    responses: {
      /** Category resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Output"];
          "application/ld+json": components["schemas"]["Category.Output.jsonld"];
          "text/html": components["schemas"]["Category.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Category resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category.Input"];
        "application/ld+json": components["schemas"]["Category.Input.jsonld"];
        "text/html": components["schemas"]["Category.Input"];
      };
    };
  };
  /** Delete a  category. */
  deleteCategoryItem: {
    parameters: {
      path: {
        /** Resource identifier */
        category_id: string;
      };
    };
    responses: {
      /** Category resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a banner from a category. */
  "getCategory BannerItem": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Banner resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Banner.BannerOutput"];
          "application/ld+json": components["schemas"]["Category.Banner.BannerOutput.jsonld"];
          "text/html": components["schemas"]["Category.Banner.BannerOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Add a banner to a category. */
  "postCategory BannerCollection": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Banner resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Category.Banner.BannerOutput"];
          "application/ld+json": components["schemas"]["Category.Banner.BannerOutput.jsonld"];
          "text/html": components["schemas"]["Category.Banner.BannerOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Alt text */
          alt?: string;
          /** @description URL to the image file which will be downloaded from there */
          externalUrl?: string;
          /** @description base64-encoded image */
          attachment?: string;
          /** @description Image name with correct extension. Required for 'attachement' field. */
          filename?: string;
        };
      };
    };
  };
  /** Delete a banner from a category. */
  "deleteCategory BannerItem": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Banner resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of featured products from a category. */
  "get_category_featuredFeatured ProductCollection": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Featured Product collection */
      200: {
        content: {
          "application/json": components["schemas"]["Featured.Product.CategoryFeaturedOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Featured.Product.CategoryFeaturedOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Featured.Product.CategoryFeaturedOutput"][];
        };
      };
    };
  };
  /** Add a featured product to a category. */
  "add_category_featuredFeatured ProductCollection": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Featured Product resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
          "application/ld+json": components["schemas"]["Featured.Product.CategoryFeaturedOutput.jsonld"];
          "text/html": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Featured Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Featured.Product.CategoryFeaturedInput"];
        "application/ld+json": components["schemas"]["Featured.Product.CategoryFeaturedInput.jsonld"];
        "text/html": components["schemas"]["Featured.Product.CategoryFeaturedInput"];
      };
    };
  };
  /** Retrieve a featured product from a category. */
  "getFeatured ProductItem": {
    parameters: {
      path: {
        category_id: number;
        product_id: number;
      };
    };
    responses: {
      /** Featured Product resource */
      200: {
        content: {
          "application/json": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
          "application/ld+json": components["schemas"]["Featured.Product.CategoryFeaturedOutput.jsonld"];
          "text/html": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Delete a featured product from a category. */
  "delete_category_featuredFeatured ProductItem": {
    parameters: {
      path: {
        category_id: number;
        product_id: number;
      };
    };
    responses: {
      /** Featured Product resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve an icon from a category. */
  "getCategory IconItem": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Icon resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Icon.IconOutput"];
          "application/ld+json": components["schemas"]["Category.Icon.IconOutput.jsonld"];
          "text/html": components["schemas"]["Category.Icon.IconOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Add an icon to a category. */
  "postCategory IconCollection": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Icon resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Category.Icon.IconOutput"];
          "application/ld+json": components["schemas"]["Category.Icon.IconOutput.jsonld"];
          "text/html": components["schemas"]["Category.Icon.IconOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Alt text */
          alt?: string;
          /** @description URL to the image file which will be downloaded from there */
          externalUrl?: string;
          /** @description base64-encoded image */
          attachment?: string;
          /** @description Image name with correct extension. Required for 'attachement' field. */
          filename?: string;
        };
      };
    };
  };
  /** Delete an icon from a category. */
  "deleteCategory IconItem": {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category Icon resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a category position in the categories tree. */
  moveCategoryItem: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Output"];
          "application/ld+json": components["schemas"]["Category.Output.jsonld"];
          "text/html": components["schemas"]["Category.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Category resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category.CategoryMoveInput"];
        "application/ld+json": components["schemas"]["Category.CategoryMoveInput.jsonld"];
        "text/html": components["schemas"]["Category.CategoryMoveInput"];
      };
    };
  };
  /** Retrieve a list of products from a category. */
  get_category_productsCategoryCollection: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category collection */
      200: {
        content: {
          "application/json": components["schemas"]["Category.CategoryProductOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Category.CategoryProductOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Category.CategoryProductOutput"][];
        };
      };
    };
  };
  /** Add a product to a category. */
  add_category_productCategoryCollection: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Category.Output"];
          "application/ld+json": components["schemas"]["Category.Output.jsonld"];
          "text/html": components["schemas"]["Category.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Category resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category.CategoryProductInput"];
        "application/ld+json": components["schemas"]["Category.CategoryProductInput.jsonld"];
        "text/html": components["schemas"]["Category.CategoryProductInput"];
      };
    };
  };
  /** Delete a product from a category. */
  delete_category_productCategoryItem: {
    parameters: {
      path: {
        category_id: number;
        product_id: number;
      };
    };
    responses: {
      /** Category resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve category statistics. */
  statsCategoryItem: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Category resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.CategoryStatsOutput"];
          "application/ld+json": components["schemas"]["Category.CategoryStatsOutput.jsonld"];
          "text/html": components["schemas"]["Category.CategoryStatsOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  coupons. */
  getCouponCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Coupon collection */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon.CouponOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Coupon.CouponOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Coupon.CouponOutput"][];
        };
      };
    };
  };
  /** Create a  coupon. */
  postCouponCollection: {
    parameters: {};
    responses: {
      /** Coupon resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Coupon.CouponOutput"];
          "application/ld+json": components["schemas"]["Coupon.CouponOutput.jsonld"];
          "text/html": components["schemas"]["Coupon.CouponOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Coupon resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Coupon.CouponInput"];
        "application/ld+json": components["schemas"]["Coupon.CouponInput.jsonld"];
        "text/html": components["schemas"]["Coupon.CouponInput"];
      };
    };
  };
  /** Retrieve a  coupon. */
  getCouponItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Coupon resource */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon.CouponOutput"];
          "application/ld+json": components["schemas"]["Coupon.CouponOutput.jsonld"];
          "text/html": components["schemas"]["Coupon.CouponOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  coupon. */
  putCouponItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Coupon resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon.CouponOutput"];
          "application/ld+json": components["schemas"]["Coupon.CouponOutput.jsonld"];
          "text/html": components["schemas"]["Coupon.CouponOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Coupon resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Coupon.CouponInput"];
        "application/ld+json": components["schemas"]["Coupon.CouponInput.jsonld"];
        "text/html": components["schemas"]["Coupon.CouponInput"];
      };
    };
  };
  /** Delete a  coupon. */
  deleteCouponItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Coupon resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  custom  product  tabs. */
  "getCustom Product TabCollection": {
    parameters: {};
    responses: {
      /** Custom Product Tab collection */
      200: {
        content: {
          "application/json": components["schemas"]["Custom.Product.Tab.Output"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Custom.Product.Tab.Output.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Custom.Product.Tab.Output"][];
        };
      };
    };
  };
  /** Create a  custom  product  tab. */
  "postCustom Product TabCollection": {
    parameters: {};
    responses: {
      /** Custom Product Tab resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Custom.Product.Tab.Output"];
          "application/ld+json": components["schemas"]["Custom.Product.Tab.Output.jsonld"];
          "text/html": components["schemas"]["Custom.Product.Tab.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Custom Product Tab resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Custom.Product.Tab.Input"];
        "application/ld+json": components["schemas"]["Custom.Product.Tab.Input.jsonld"];
        "text/html": components["schemas"]["Custom.Product.Tab.Input"];
      };
    };
  };
  /** Retrieve a  custom  product  tab. */
  "getCustom Product TabItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Custom Product Tab resource */
      200: {
        content: {
          "application/json": components["schemas"]["Custom.Product.Tab.Output"];
          "application/ld+json": components["schemas"]["Custom.Product.Tab.Output.jsonld"];
          "text/html": components["schemas"]["Custom.Product.Tab.Output"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  custom  product  tab. */
  "putCustom Product TabItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Custom Product Tab resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Custom.Product.Tab.Output"];
          "application/ld+json": components["schemas"]["Custom.Product.Tab.Output.jsonld"];
          "text/html": components["schemas"]["Custom.Product.Tab.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Custom Product Tab resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Custom.Product.Tab.Input"];
        "application/ld+json": components["schemas"]["Custom.Product.Tab.Input.jsonld"];
        "text/html": components["schemas"]["Custom.Product.Tab.Input"];
      };
    };
  };
  /** Delete a  custom  product  tab. */
  "deleteCustom Product TabItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Custom Product Tab resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of featured products from the front page. */
  "get_front_page_featuredFeatured ProductCollection": {
    parameters: {};
    responses: {
      /** Featured Product collection */
      200: {
        content: {
          "application/json": components["schemas"]["Featured.Product.CategoryFeaturedOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Featured.Product.CategoryFeaturedOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Featured.Product.CategoryFeaturedOutput"][];
        };
      };
    };
  };
  /** Add a featured product to the front page. */
  "add_front_page_featuredFeatured ProductCollection": {
    parameters: {};
    responses: {
      /** Featured Product resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
          "application/ld+json": components["schemas"]["Featured.Product.CategoryFeaturedOutput.jsonld"];
          "text/html": components["schemas"]["Featured.Product.CategoryFeaturedOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Featured Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Featured.Product.CategoryFeaturedInput"];
        "application/ld+json": components["schemas"]["Featured.Product.CategoryFeaturedInput.jsonld"];
        "text/html": components["schemas"]["Featured.Product.CategoryFeaturedInput"];
      };
    };
  };
  /** Delete a featured product from the front page. */
  "delete_front_page_featuredFeatured ProductItem": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Featured Product resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  memberships. */
  getMembershipCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[name]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Membership collection */
      200: {
        content: {
          "application/json": components["schemas"]["Membership.MembershipOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Membership.MembershipOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Membership.MembershipOutput"][];
        };
      };
    };
  };
  /** Create a  membership. */
  postMembershipCollection: {
    parameters: {};
    responses: {
      /** Membership resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Membership.MembershipOutput"];
          "application/ld+json": components["schemas"]["Membership.MembershipOutput.jsonld"];
          "text/html": components["schemas"]["Membership.MembershipOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Membership resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Membership.MembershipInput"];
        "application/ld+json": components["schemas"]["Membership.MembershipInput.jsonld"];
        "text/html": components["schemas"]["Membership.MembershipInput"];
      };
    };
  };
  /** Retrieve a  membership. */
  getMembershipItem: {
    parameters: {
      path: {
        /** Resource identifier */
        membership_id: string;
      };
    };
    responses: {
      /** Membership resource */
      200: {
        content: {
          "application/json": components["schemas"]["Membership.MembershipOutput"];
          "application/ld+json": components["schemas"]["Membership.MembershipOutput.jsonld"];
          "text/html": components["schemas"]["Membership.MembershipOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  membership. */
  putMembershipItem: {
    parameters: {
      path: {
        /** Resource identifier */
        membership_id: string;
      };
    };
    responses: {
      /** Membership resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Membership.MembershipOutput"];
          "application/ld+json": components["schemas"]["Membership.MembershipOutput.jsonld"];
          "text/html": components["schemas"]["Membership.MembershipOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Membership resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Membership.MembershipInput"];
        "application/ld+json": components["schemas"]["Membership.MembershipInput.jsonld"];
        "text/html": components["schemas"]["Membership.MembershipInput"];
      };
    };
  };
  /** Delete a  membership. */
  deleteMembershipItem: {
    parameters: {
      path: {
        /** Resource identifier */
        membership_id: string;
      };
    };
    responses: {
      /** Membership resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  orders. */
  getOrderCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "date[before]"?: string;
        "date[strictly_before]"?: string;
        "date[after]"?: string;
        "date[strictly_after]"?: string;
        "order[date]"?: "asc" | "desc";
        "order[lastRenewDate]"?: "asc" | "desc";
        "paymentStatus.code"?: string;
        "paymentStatus.code[]"?: string[];
        "shippingStatus.code"?: string;
        "shippingStatus.code[]"?: string[];
        "profile.login"?: string;
      };
    };
    responses: {
      /** Order collection */
      200: {
        content: {
          "application/json": components["schemas"]["Order.OrderOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Order.OrderOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Order.OrderOutput"][];
        };
      };
    };
  };
  /** Retrieve an order by order number. */
  get_by_numberOrderItem: {
    parameters: {
      path: {
        orderNumber: string;
      };
    };
    responses: {
      /** Order resource */
      200: {
        content: {
          "application/json": components["schemas"]["Order.OrderOutput"];
          "application/ld+json": components["schemas"]["Order.OrderOutput.jsonld"];
          "text/html": components["schemas"]["Order.OrderOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve an order by order id. */
  getOrderItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Order resource */
      200: {
        content: {
          "application/json": components["schemas"]["Order.OrderOutput"];
          "application/ld+json": components["schemas"]["Order.OrderOutput.jsonld"];
          "text/html": components["schemas"]["Order.OrderOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  order  details. */
  "getOrder DetailCollection": {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Order Detail collection */
      200: {
        content: {
          "application/json": components["schemas"]["Order.Detail.OrderDetailOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Order.Detail.OrderDetailOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Order.Detail.OrderDetailOutput"][];
        };
      };
    };
  };
  /** Retrieve a list of  order  history  events. */
  "getOrder History EventCollection": {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Order History Event collection */
      200: {
        content: {
          "application/json": components["schemas"]["Order.History.Event.OrderHistoryOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Order.History.Event.OrderHistoryOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Order.History.Event.OrderHistoryOutput"][];
        };
      };
    };
  };
  /** Retrieve a  order payment status. */
  getOrderPaymentStatusItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OrderPaymentStatus resource */
      200: {
        content: {
          "application/json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput"];
          "application/ld+json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput.jsonld"];
          "text/html": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  order payment status. */
  putOrderPaymentStatusItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OrderPaymentStatus resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput"];
          "application/ld+json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput.jsonld"];
          "text/html": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated OrderPaymentStatus resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusInput"];
        "application/ld+json": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusInput.jsonld"];
        "text/html": components["schemas"]["OrderPaymentStatus.OrderPaymentStatusInput"];
      };
    };
  };
  /** Retrieve a list of order payment transactions. */
  getTransactionCollection: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[date]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Transaction collection */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction.OrderPaymentTransactionOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Transaction.OrderPaymentTransactionOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Transaction.OrderPaymentTransactionOutput"][];
        };
      };
    };
  };
  /** Retrieve a  order shipping status. */
  getOrderShippingStatusItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OrderShippingStatus resource */
      200: {
        content: {
          "application/json": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput"];
          "application/ld+json": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput.jsonld"];
          "text/html": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  order shipping status. */
  putOrderShippingStatusItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OrderShippingStatus resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput"];
          "application/ld+json": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput.jsonld"];
          "text/html": components["schemas"]["OrderShippingStatus.OrderShippingStatusOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated OrderShippingStatus resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderShippingStatus.OrderShippingStatusInput"];
        "application/ld+json": components["schemas"]["OrderShippingStatus.OrderShippingStatusInput.jsonld"];
        "text/html": components["schemas"]["OrderShippingStatus.OrderShippingStatusInput"];
      };
    };
  };
  /** Retrieve a list of product classes. */
  "getProduct ClassCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[name]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Product Class collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Class.ProductClassOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Class.ProductClassOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Class.ProductClassOutput"][];
        };
      };
    };
  };
  /** Create a  product  class. */
  "postProduct ClassCollection": {
    parameters: {};
    responses: {
      /** Product Class resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Class.ProductClassOutput"];
          "application/ld+json": components["schemas"]["Product.Class.ProductClassOutput.jsonld"];
          "text/html": components["schemas"]["Product.Class.ProductClassOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Class resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Class.ProductClassInput"];
        "application/ld+json": components["schemas"]["Product.Class.ProductClassInput.jsonld"];
        "text/html": components["schemas"]["Product.Class.ProductClassInput"];
      };
    };
  };
  /** Retrieve a list of attribute groups from a product class. */
  "product_class_based_get_subresourcesAttribute GroupCollection": {
    parameters: {
      path: {
        class_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Group collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"][];
        };
      };
    };
  };
  /** Add an attribute group to a product class. */
  "product_class_based_post_subresourcesAttribute GroupCollection": {
    parameters: {
      path: {
        class_id: number;
      };
    };
    responses: {
      /** Attribute Group resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Group resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Group.AttributeGroupInput"];
        "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Group.AttributeGroupInput"];
      };
    };
  };
  /** Retrieve an attribute group from a product class. */
  "product_class_based_get_subresourceAttribute GroupItem": {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Group resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an attribute group of a product class. */
  "product_class_based_put_subresourceAttribute GroupItem": {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Group resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
          "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Group.AttributeGroupOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Group resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Group.AttributeGroupInput"];
        "application/ld+json": components["schemas"]["Attribute.Group.AttributeGroupInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Group.AttributeGroupInput"];
      };
    };
  };
  /** Delete an attribute group from a product class. */
  "product_class_based_delete_subresourceAttribute GroupItem": {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Group resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product class yes/no attributes. */
  product_class_based_get_checkboxesAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"][];
        };
      };
    };
  };
  /** Add a yes/no attribute to a product class. */
  product_class_based_post_checkboxAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeCheckboxInput"];
      };
    };
  };
  /** Retrieve a product class yes/no attribute. */
  product_class_based_get_checkboxAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product class yes/no attribute. */
  product_class_based_put_checkboxAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeCheckboxInput"];
      };
    };
  };
  /** Delete a product class yes/no attribute. */
  product_class_based_delete_checkboxAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product class plain field attributes. */
  product_class_based_get_selectsAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"][];
        };
      };
    };
  };
  /** Add a plain field attribute to a product class. */
  product_class_based_post_selectAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeSelectInput"];
      };
    };
  };
  /** Retrieve a list of options from a product class plain field attribute. */
  "product_class_based_get_option_selectsAttribute OptionCollection": {
    parameters: {
      path: {
        class_id: number;
        attribute_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Option collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
        };
      };
    };
  };
  /** Add an option to a product class plain field attribute. */
  "product_class_based_post_option_selectAttribute OptionCollection": {
    parameters: {
      path: {
        class_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Option resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Retrieve an option from a product class plain field attribute. */
  "product_class_based_get_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        class_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an option of a product class plain field attribute. */
  "product_class_based_put_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        class_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Delete an option from a product class plain field attribute. */
  "product_class_based_delete_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        class_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a product class plain field attribute. */
  product_class_based_get_selectAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product class plain field attribute. */
  product_class_based_put_selectAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeSelectInput"];
      };
    };
  };
  /** Delete a product class plain field attribute. */
  product_class_based_delete_selectAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product class textarea attributes. */
  product_class_based_get_textsAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.AttributeTextOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"][];
        };
      };
    };
  };
  /** Add a textarea attribute to a product class. */
  product_class_based_post_textAttributeCollection: {
    parameters: {
      path: {
        class_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeTextInput"];
      };
    };
  };
  /** Retrieve a product class textarea attribute. */
  product_class_based_get_textAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product class textarea attribute. */
  product_class_based_put_textAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.AttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.AttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.AttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.AttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.AttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.AttributeTextInput"];
      };
    };
  };
  /** Delete a product class textarea attribute. */
  product_class_based_delete_textAttributeItem: {
    parameters: {
      path: {
        class_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a  product  class. */
  "getProduct ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Class resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Class.ProductClassOutput"];
          "application/ld+json": components["schemas"]["Product.Class.ProductClassOutput.jsonld"];
          "text/html": components["schemas"]["Product.Class.ProductClassOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  class. */
  "putProduct ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Class resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Class.ProductClassOutput"];
          "application/ld+json": components["schemas"]["Product.Class.ProductClassOutput.jsonld"];
          "text/html": components["schemas"]["Product.Class.ProductClassOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Class resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Class.ProductClassInput"];
        "application/ld+json": components["schemas"]["Product.Class.ProductClassInput.jsonld"];
        "text/html": components["schemas"]["Product.Class.ProductClassInput"];
      };
    };
  };
  /** Delete a  product  class. */
  "deleteProduct ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Class resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  stickers. */
  "getProduct StickerCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Sticker collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Sticker.ProductStickerOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Sticker.ProductStickerOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Sticker.ProductStickerOutput"][];
        };
      };
    };
  };
  /** Create a  product  sticker. */
  "postProduct StickerCollection": {
    parameters: {};
    responses: {
      /** Product Sticker resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Sticker.ProductStickerOutput"];
          "application/ld+json": components["schemas"]["Product.Sticker.ProductStickerOutput.jsonld"];
          "text/html": components["schemas"]["Product.Sticker.ProductStickerOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Sticker resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Sticker.ProductStickerInput"];
        "application/ld+json": components["schemas"]["Product.Sticker.ProductStickerInput.jsonld"];
        "text/html": components["schemas"]["Product.Sticker.ProductStickerInput"];
      };
    };
  };
  /** Retrieve a  product  sticker. */
  "getProduct StickerItem": {
    parameters: {
      path: {
        sticker_id: number;
      };
    };
    responses: {
      /** Product Sticker resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Sticker.ProductStickerOutput"];
          "application/ld+json": components["schemas"]["Product.Sticker.ProductStickerOutput.jsonld"];
          "text/html": components["schemas"]["Product.Sticker.ProductStickerOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  sticker. */
  "putProduct StickerItem": {
    parameters: {
      path: {
        sticker_id: number;
      };
    };
    responses: {
      /** Product Sticker resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Sticker.ProductStickerOutput"];
          "application/ld+json": components["schemas"]["Product.Sticker.ProductStickerOutput.jsonld"];
          "text/html": components["schemas"]["Product.Sticker.ProductStickerOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Sticker resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Sticker.ProductStickerInput"];
        "application/ld+json": components["schemas"]["Product.Sticker.ProductStickerInput.jsonld"];
        "text/html": components["schemas"]["Product.Sticker.ProductStickerInput"];
      };
    };
  };
  /** Delete a  product  sticker. */
  "deleteProduct StickerItem": {
    parameters: {
      path: {
        sticker_id: number;
      };
    };
    responses: {
      /** Product Sticker resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  tags. */
  "getProduct TagCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[name]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Product Tag collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Tag.TagOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Tag.TagOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Tag.TagOutput"][];
        };
      };
    };
  };
  /** Create a  product  tag. */
  "postProduct TagCollection": {
    parameters: {};
    responses: {
      /** Product Tag resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Tag.TagOutput"];
          "application/ld+json": components["schemas"]["Product.Tag.TagOutput.jsonld"];
          "text/html": components["schemas"]["Product.Tag.TagOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Tag resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Tag.TagInput"];
        "application/ld+json": components["schemas"]["Product.Tag.TagInput.jsonld"];
        "text/html": components["schemas"]["Product.Tag.TagInput"];
      };
    };
  };
  /** Retrieve a  product  tag. */
  "getProduct TagItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Tag resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Tag.TagOutput"];
          "application/ld+json": components["schemas"]["Product.Tag.TagOutput.jsonld"];
          "text/html": components["schemas"]["Product.Tag.TagOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  tag. */
  "putProduct TagItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Tag resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Tag.TagOutput"];
          "application/ld+json": components["schemas"]["Product.Tag.TagOutput.jsonld"];
          "text/html": components["schemas"]["Product.Tag.TagOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Tag resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Tag.TagInput"];
        "application/ld+json": components["schemas"]["Product.Tag.TagInput.jsonld"];
        "text/html": components["schemas"]["Product.Tag.TagInput"];
      };
    };
  };
  /** Delete a  product  tag. */
  "deleteProduct TagItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product Tag resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  products. */
  getProductCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[name]"?: "asc" | "desc";
        "order[price]"?: "asc" | "desc";
        "order[arrivalDate]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Product collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Output"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Output.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Output"][];
        };
      };
    };
  };
  /** Create a  product. */
  postProductCollection: {
    parameters: {};
    responses: {
      /** Product resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Output"];
          "application/ld+json": components["schemas"]["Product.Output.jsonld"];
          "text/html": components["schemas"]["Product.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Input"];
        "application/ld+json": components["schemas"]["Product.Input.jsonld"];
        "text/html": components["schemas"]["Product.Input"];
      };
    };
  };
  /** Retrieve a  product. */
  getProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        product_id: string;
      };
    };
    responses: {
      /** Product resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Output"];
          "application/ld+json": components["schemas"]["Product.Output.jsonld"];
          "text/html": components["schemas"]["Product.Output"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product. */
  putProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        product_id: string;
      };
    };
    responses: {
      /** Product resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Output"];
          "application/ld+json": components["schemas"]["Product.Output.jsonld"];
          "text/html": components["schemas"]["Product.Output"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Input"];
        "application/ld+json": components["schemas"]["Product.Input.jsonld"];
        "text/html": components["schemas"]["Product.Input"];
      };
    };
  };
  /** Delete a  product. */
  deleteProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        product_id: string;
      };
    };
    responses: {
      /** Product resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  attachments. */
  "getProduct AttachmentCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Attachment collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Attachment.ProductAttachmentOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Attachment.ProductAttachmentOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Attachment.ProductAttachmentOutput"][];
        };
      };
    };
  };
  /** Create a  product  attachment. */
  "postProduct AttachmentCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Product Attachment resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
          "application/ld+json": components["schemas"]["Product.Attachment.ProductAttachmentOutput.jsonld"];
          "text/html": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Attachment resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Attachment.ProductAttachmentInput"];
        "application/ld+json": components["schemas"]["Product.Attachment.ProductAttachmentInput.jsonld"];
        "text/html": components["schemas"]["Product.Attachment.ProductAttachmentInput"];
      };
    };
  };
  /** Retrieve a  product  attachment. */
  "getProduct AttachmentItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Attachment resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
          "application/ld+json": components["schemas"]["Product.Attachment.ProductAttachmentOutput.jsonld"];
          "text/html": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  attachment. */
  "putProduct AttachmentItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Attachment resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
          "application/ld+json": components["schemas"]["Product.Attachment.ProductAttachmentOutput.jsonld"];
          "text/html": components["schemas"]["Product.Attachment.ProductAttachmentOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Attachment resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Attachment.ProductAttachmentUpdateInput"];
        "application/ld+json": components["schemas"]["Product.Attachment.ProductAttachmentUpdateInput.jsonld"];
        "text/html": components["schemas"]["Product.Attachment.ProductAttachmentUpdateInput"];
      };
    };
  };
  /** Delete a  product  attachment. */
  "deleteProduct AttachmentItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Attachment resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a property from a product attribute. */
  "getAttribute PropertyItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Property resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
          "application/ld+json": components["schemas"]["Attribute.Property.AttributePropertyOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a property of a product attribute. */
  "putAttribute PropertyItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Property resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
          "application/ld+json": components["schemas"]["Attribute.Property.AttributePropertyOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Property resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Property.AttributePropertyInput"];
        "application/ld+json": components["schemas"]["Attribute.Property.AttributePropertyInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Property.AttributePropertyInput"];
      };
    };
  };
  /** Add a property to a product attribute. */
  "postAttribute PropertyCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Property resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
          "application/ld+json": components["schemas"]["Attribute.Property.AttributePropertyOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Property.AttributePropertyOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Property resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Property.AttributePropertyInput"];
        "application/ld+json": components["schemas"]["Attribute.Property.AttributePropertyInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Property.AttributePropertyInput"];
      };
    };
  };
  /** Retrieve a list of product-specific yes/no attributes. */
  product_based_get_checkboxesAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.ProductAttributeCheckboxOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"][];
        };
      };
    };
  };
  /** Add a yes/no attribute to a product. */
  product_based_post_checkboxAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxInput"];
      };
    };
  };
  /** Retrieve a list of values from a product yes/no attribute. */
  "getYes/No Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Yes/No Attribute Value collection */
      200: {
        content: {
          "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"][];
        };
      };
    };
  };
  /** Add a value to a product yes/no attribute. */
  "postYes/No Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Yes/No Attribute Value resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
          "application/ld+json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Yes/No Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput"];
        "application/ld+json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput"];
      };
    };
  };
  /** Retrieve a value from a product yes/no attribute. */
  "getYes/No Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Yes/No Attribute Value resource */
      200: {
        content: {
          "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
          "application/ld+json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a value of a product yes/no attribute. */
  "putYes/No Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Yes/No Attribute Value resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
          "application/ld+json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Yes/No Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput"];
        "application/ld+json": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Yes.No.Attribute.Value.AttributeValueCheckboxInput"];
      };
    };
  };
  /** Delete a value from a product yes/no attribute. */
  "deleteYes/No Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Yes/No Attribute Value resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a product-specific yes/no attribute. */
  product_based_get_checkboxAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product-specific yes/no attribute. */
  product_based_put_checkboxAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeCheckboxOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeCheckboxInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeCheckboxInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeCheckboxInput"];
      };
    };
  };
  /** Delete a product-specific yes/no attribute. */
  product_based_delete_checkboxAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a value from a product hidden attribute. */
  "getHidden Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Hidden Attribute Value resource */
      200: {
        content: {
          "application/json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
          "application/ld+json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a value of a product hidden attribute. */
  "putHidden Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Hidden Attribute Value resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
          "application/ld+json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Hidden Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput"];
        "application/ld+json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput.jsonld"];
        "text/html": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput"];
      };
    };
  };
  /** Add a value to a product hidden attribute. */
  "postHidden Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Hidden Attribute Value resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
          "application/ld+json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput.jsonld"];
          "text/html": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Hidden Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput"];
        "application/ld+json": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput.jsonld"];
        "text/html": components["schemas"]["Hidden.Attribute.Value.AttributeValueHiddenInput"];
      };
    };
  };
  /** Delete a value from a product hidden attribute. */
  "deleteHidden Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Hidden Attribute Value resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product-specific plain field attributes. */
  product_based_get_selectsAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.ProductAttributeSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.ProductAttributeSelectOutput"][];
        };
      };
    };
  };
  /** Add a plain field attribute to a product. */
  product_based_post_selectAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeSelectInput"];
      };
    };
  };
  /** Retrieve a list of options from a product-specific plain field attribute. */
  "product_based_get_option_selectsAttribute OptionCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute Option collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"][];
        };
      };
    };
  };
  /** Add an option to a product-specific plain field attribute. */
  "product_based_post_option_selectAttribute OptionCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Attribute Option resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Retrieve an option from a product-specific plain field attribute. */
  "product_based_get_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an option of a product-specific plain field attribute. */
  "product_based_put_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute Option resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.Option.AttributeOptionSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.Option.AttributeOptionSelectInput"];
      };
    };
  };
  /** Delete an option from a product-specific plain field attribute. */
  "product_based_delete_option_selectAttribute OptionItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute Option resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of values from a product plain field attribute. */
  "getPlain Field Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Plain Field Attribute Value collection */
      200: {
        content: {
          "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"][];
        };
      };
    };
  };
  /** Add a value to a product plain field attribute. */
  "postPlain Field Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Plain Field Attribute Value resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
          "application/ld+json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput.jsonld"];
          "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Plain Field Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput"];
        "application/ld+json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput.jsonld"];
        "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput"];
      };
    };
  };
  /** Retrieve a value from a product plain field attribute. */
  "getPlain Field Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Plain Field Attribute Value resource */
      200: {
        content: {
          "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
          "application/ld+json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput.jsonld"];
          "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a value of a product plain field attribute. */
  "putPlain Field Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Plain Field Attribute Value resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
          "application/ld+json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput.jsonld"];
          "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Plain Field Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput"];
        "application/ld+json": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput.jsonld"];
        "text/html": components["schemas"]["Plain.Field.Attribute.Value.AttributeValueSelectInput"];
      };
    };
  };
  /** Delete a value from a product plain field attribute. */
  "deletePlain Field Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
        id: number;
      };
    };
    responses: {
      /** Plain Field Attribute Value resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a product-specific plain field attribute. */
  product_based_get_selectAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product-specific plain field attribute. */
  product_based_put_selectAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeSelectOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeSelectOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeSelectInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeSelectInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeSelectInput"];
      };
    };
  };
  /** Delete a product-specific plain field attribute. */
  product_based_delete_selectAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product-specific textarea attributes. */
  product_based_get_textsAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Attribute collection */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeTextOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Attribute.ProductAttributeTextOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Attribute.ProductAttributeTextOutput"][];
        };
      };
    };
  };
  /** Add a textarea attribute to a product. */
  product_based_post_textAttributeCollection: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Attribute resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeTextInput"];
      };
    };
  };
  /** Retrieve a value from a product textarea attribute. */
  "getTextarea Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Textarea Attribute Value resource */
      200: {
        content: {
          "application/json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
          "application/ld+json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput.jsonld"];
          "text/html": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a value of a product textarea attribute. */
  "putTextarea Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Textarea Attribute Value resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
          "application/ld+json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput.jsonld"];
          "text/html": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Textarea Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput"];
        "application/ld+json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput.jsonld"];
        "text/html": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput"];
      };
    };
  };
  /** Add a value to a product textarea attribute. */
  "postTextarea Attribute ValueCollection": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Textarea Attribute Value resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
          "application/ld+json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput.jsonld"];
          "text/html": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Textarea Attribute Value resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput"];
        "application/ld+json": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput.jsonld"];
        "text/html": components["schemas"]["Textarea.Attribute.Value.AttributeValueTextInput"];
      };
    };
  };
  /** Delete a value from a product textarea attribute. */
  "deleteTextarea Attribute ValueItem": {
    parameters: {
      path: {
        product_id: number;
        attribute_id: number;
      };
    };
    responses: {
      /** Textarea Attribute Value resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a product-specific textarea attribute. */
  product_based_get_textAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeTextOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product-specific textarea attribute. */
  product_based_put_textAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Attribute.ProductAttributeTextOutput"];
          "application/ld+json": components["schemas"]["Attribute.ProductAttributeTextOutput.jsonld"];
          "text/html": components["schemas"]["Attribute.ProductAttributeTextOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Attribute resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Attribute.ProductAttributeTextInput"];
        "application/ld+json": components["schemas"]["Attribute.ProductAttributeTextInput.jsonld"];
        "text/html": components["schemas"]["Attribute.ProductAttributeTextInput"];
      };
    };
  };
  /** Delete a product-specific textarea attribute. */
  product_based_delete_textAttributeItem: {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Attribute resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Add an image to a product. */
  postProductImageCollection: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** ProductImage resource created */
      201: {
        content: {
          "application/json": components["schemas"]["ProductImage.ImageOutput"];
          "application/ld+json": components["schemas"]["ProductImage.ImageOutput.jsonld"];
          "text/html": components["schemas"]["ProductImage.ImageOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          position?: number;
          /** @description Alt text */
          alt?: string;
          /** @description URL to the image file which will be downloaded from there */
          externalUrl?: string;
          /** @description base64-encoded image */
          attachment?: string;
          /** @description Image name with correct extension. Required for 'attachement' field. */
          filename?: string;
        };
      };
    };
  };
  /** Retrieve an image from a product. */
  getProductImageItem: {
    parameters: {
      path: {
        product_id: number;
        image_id: number;
      };
    };
    responses: {
      /** ProductImage resource */
      200: {
        content: {
          "application/json": components["schemas"]["ProductImage.ImageOutput"];
          "application/ld+json": components["schemas"]["ProductImage.ImageOutput.jsonld"];
          "text/html": components["schemas"]["ProductImage.ImageOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update the properties of a product image. */
  putProductImageItem: {
    parameters: {
      path: {
        product_id: number;
        image_id: number;
      };
    };
    responses: {
      /** ProductImage resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["ProductImage.ImageOutput"];
          "application/ld+json": components["schemas"]["ProductImage.ImageOutput.jsonld"];
          "text/html": components["schemas"]["ProductImage.ImageOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated ProductImage resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductImage.ImageUpdate"];
        "application/ld+json": components["schemas"]["ProductImage.ImageUpdate.jsonld"];
        "text/html": components["schemas"]["ProductImage.ImageUpdate"];
      };
    };
  };
  /** Delete an image from a product. */
  deleteProductImageItem: {
    parameters: {
      path: {
        product_id: number;
        image_id: number;
      };
    };
    responses: {
      /** ProductImage resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of product PIN codes. */
  "getProduct PIN CodeCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product PIN Code collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"][];
        };
      };
    };
  };
  /** Create a product PIN code. */
  "postProduct PIN CodeCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Product PIN Code resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
          "application/ld+json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput.jsonld"];
          "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product PIN Code resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeInput"];
        "application/ld+json": components["schemas"]["Product.PIN.Code.ProductPINCodeInput.jsonld"];
        "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeInput"];
      };
    };
  };
  /** Retrieve a product PIN code. */
  "getProduct PIN CodeItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product PIN Code resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
          "application/ld+json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput.jsonld"];
          "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a product PIN code. */
  "putProduct PIN CodeItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product PIN Code resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
          "application/ld+json": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput.jsonld"];
          "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product PIN Code resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.PIN.Code.ProductPINCodeInput"];
        "application/ld+json": components["schemas"]["Product.PIN.Code.ProductPINCodeInput.jsonld"];
        "text/html": components["schemas"]["Product.PIN.Code.ProductPINCodeInput"];
      };
    };
  };
  /** Delete a product PIN code. */
  "deleteProduct PIN CodeItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product PIN Code resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  related  products. */
  "getRelated ProductCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Related Product collection */
      200: {
        content: {
          "application/json": components["schemas"]["Related.Product.ProductUpsellingProductOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Related.Product.ProductUpsellingProductOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Related.Product.ProductUpsellingProductOutput"][];
        };
      };
    };
  };
  /** Create a  related  product. */
  "postRelated ProductCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Related Product resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
          "application/ld+json": components["schemas"]["Related.Product.ProductUpsellingProductOutput.jsonld"];
          "text/html": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Related Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Related.Product.ProductUpsellingProductInput"];
        "application/ld+json": components["schemas"]["Related.Product.ProductUpsellingProductInput.jsonld"];
        "text/html": components["schemas"]["Related.Product.ProductUpsellingProductInput"];
      };
    };
  };
  /** Retrieve a  related  product. */
  "getRelated ProductItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Related Product resource */
      200: {
        content: {
          "application/json": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
          "application/ld+json": components["schemas"]["Related.Product.ProductUpsellingProductOutput.jsonld"];
          "text/html": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  related  product. */
  "putRelated ProductItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Related Product resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
          "application/ld+json": components["schemas"]["Related.Product.ProductUpsellingProductOutput.jsonld"];
          "text/html": components["schemas"]["Related.Product.ProductUpsellingProductOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Related Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Related.Product.ProductUpsellingProductInput"];
        "application/ld+json": components["schemas"]["Related.Product.ProductUpsellingProductInput.jsonld"];
        "text/html": components["schemas"]["Related.Product.ProductUpsellingProductInput"];
      };
    };
  };
  /** Delete a  related  product. */
  "deleteRelated ProductItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Related Product resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  reviews. */
  "getProduct ReviewCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Review collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Review.ProductReviewOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Review.ProductReviewOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Review.ProductReviewOutput"][];
        };
      };
    };
  };
  /** Create a  product  review. */
  "postProduct ReviewCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Product Review resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Review.ProductReviewOutput"];
          "application/ld+json": components["schemas"]["Product.Review.ProductReviewOutput.jsonld"];
          "text/html": components["schemas"]["Product.Review.ProductReviewOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Review resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Review.ProductReviewInput"];
        "application/ld+json": components["schemas"]["Product.Review.ProductReviewInput.jsonld"];
        "text/html": components["schemas"]["Product.Review.ProductReviewInput"];
      };
    };
  };
  /** Retrieve a  product  review. */
  "getProduct ReviewItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Review resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Review.ProductReviewOutput"];
          "application/ld+json": components["schemas"]["Product.Review.ProductReviewOutput.jsonld"];
          "text/html": components["schemas"]["Product.Review.ProductReviewOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  review. */
  "putProduct ReviewItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Review resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Review.ProductReviewOutput"];
          "application/ld+json": components["schemas"]["Product.Review.ProductReviewOutput.jsonld"];
          "text/html": components["schemas"]["Product.Review.ProductReviewOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Review resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Review.ProductReviewInput"];
        "application/ld+json": components["schemas"]["Product.Review.ProductReviewInput.jsonld"];
        "text/html": components["schemas"]["Product.Review.ProductReviewInput"];
      };
    };
  };
  /** Delete a  product  review. */
  "deleteProduct ReviewItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Review resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  variants. */
  "getProduct VariantCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Variant collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.ProductVariantOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Variant.ProductVariantOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Variant.ProductVariantOutput"][];
        };
      };
    };
  };
  /** Create a  product  variant. */
  "postProduct VariantCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Product Variant resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Variant.ProductVariantOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.ProductVariantOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.ProductVariantOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Variant resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Variant.ProductVariantInput"];
        "application/ld+json": components["schemas"]["Product.Variant.ProductVariantInput.jsonld"];
        "text/html": components["schemas"]["Product.Variant.ProductVariantInput"];
      };
    };
  };
  /** Retrieve a  product  variant. */
  "getProduct VariantItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.ProductVariantOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.ProductVariantOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.ProductVariantOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  variant. */
  "putProduct VariantItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.ProductVariantOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.ProductVariantOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.ProductVariantOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Variant resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Variant.ProductVariantUpdate"];
        "application/ld+json": components["schemas"]["Product.Variant.ProductVariantUpdate.jsonld"];
        "text/html": components["schemas"]["Product.Variant.ProductVariantUpdate"];
      };
    };
  };
  /** Delete a  product  variant. */
  "deleteProduct VariantItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of wholesale prices from a product variant. */
  "getProduct Variant Wholesale PriceCollection": {
    parameters: {
      path: {
        product_id: number;
        variant_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Variant Wholesale Price collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"][];
        };
      };
    };
  };
  /** Add a wholesale price to a product variant. */
  "postProduct Variant Wholesale PriceCollection": {
    parameters: {
      path: {
        product_id: number;
        variant_id: number;
      };
    };
    responses: {
      /** Product Variant Wholesale Price resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Variant Wholesale Price resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput"];
        "application/ld+json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput.jsonld"];
        "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput"];
      };
    };
  };
  /** Retrieve a wholesale price from a product variant. */
  "getProduct Variant Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        variant_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant Wholesale Price resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a wholesale price of a product variant. */
  "putProduct Variant Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        variant_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant Wholesale Price resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Variant Wholesale Price resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput"];
        "application/ld+json": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput.jsonld"];
        "text/html": components["schemas"]["Product.Variant.Wholesale.Price.ProductVariantWholesalePriceInput"];
      };
    };
  };
  /** Delete a wholesale price from a product variant. */
  "deleteProduct Variant Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        variant_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Variant Wholesale Price resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  product  wholesale  prices. */
  "getProduct Wholesale PriceCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Wholesale Price collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"][];
        };
      };
    };
  };
  /** Create a  product  wholesale  price. */
  "postProduct Wholesale PriceCollection": {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Product Wholesale Price resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Product Wholesale Price resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput"];
        "application/ld+json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput.jsonld"];
        "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput"];
      };
    };
  };
  /** Retrieve a  product  wholesale  price. */
  "getProduct Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Wholesale Price resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  product  wholesale  price. */
  "putProduct Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Wholesale Price resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
          "application/ld+json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput.jsonld"];
          "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Product Wholesale Price resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput"];
        "application/ld+json": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput.jsonld"];
        "text/html": components["schemas"]["Product.Wholesale.Price.ProductWholesalePriceInput"];
      };
    };
  };
  /** Delete a  product  wholesale  price. */
  "deleteProduct Wholesale PriceItem": {
    parameters: {
      path: {
        product_id: number;
        id: number;
      };
    };
    responses: {
      /** Product Wholesale Price resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  profiles. */
  getProfileCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "first_login[before]"?: string;
        "first_login[strictly_before]"?: string;
        "first_login[after]"?: string;
        "first_login[strictly_after]"?: string;
        "added[before]"?: string;
        "added[strictly_before]"?: string;
        "added[after]"?: string;
        "added[strictly_after]"?: string;
        login?: string;
        searchFakeField?: string;
      };
    };
    responses: {
      /** Profile collection */
      200: {
        content: {
          "application/json": components["schemas"]["Profile.ProfileOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Profile.ProfileOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Profile.ProfileOutput"][];
        };
      };
    };
  };
  /** Create a  profile. */
  postProfileCollection: {
    parameters: {};
    responses: {
      /** Profile resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Profile.ProfileOutput"];
          "application/ld+json": components["schemas"]["Profile.ProfileOutput.jsonld"];
          "text/html": components["schemas"]["Profile.ProfileOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Profile resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profile.ProfileInput"];
        "application/ld+json": components["schemas"]["Profile.ProfileInput.jsonld"];
        "text/html": components["schemas"]["Profile.ProfileInput"];
      };
    };
  };
  /** Retrieve a  profile. */
  getProfileItem: {
    parameters: {
      path: {
        /** Resource identifier */
        profile_id: string;
      };
    };
    responses: {
      /** Profile resource */
      200: {
        content: {
          "application/json": components["schemas"]["Profile.ProfileOutput"];
          "application/ld+json": components["schemas"]["Profile.ProfileOutput.jsonld"];
          "text/html": components["schemas"]["Profile.ProfileOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  profile. */
  putProfileItem: {
    parameters: {
      path: {
        /** Resource identifier */
        profile_id: string;
      };
    };
    responses: {
      /** Profile resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Profile.ProfileOutput"];
          "application/ld+json": components["schemas"]["Profile.ProfileOutput.jsonld"];
          "text/html": components["schemas"]["Profile.ProfileOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Profile resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profile.ProfileInput"];
        "application/ld+json": components["schemas"]["Profile.ProfileInput.jsonld"];
        "text/html": components["schemas"]["Profile.ProfileInput"];
      };
    };
  };
  /** Delete a  profile. */
  deleteProfileItem: {
    parameters: {
      path: {
        /** Resource identifier */
        profile_id: string;
      };
    };
    responses: {
      /** Profile resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of addresses from a profile. */
  getAddressCollection: {
    parameters: {
      path: {
        profile_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Address collection */
      200: {
        content: {
          "application/json": components["schemas"]["Address.ProfileAddressOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Address.ProfileAddressOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Address.ProfileAddressOutput"][];
        };
      };
    };
  };
  /** Add an address to a profile. */
  postAddressCollection: {
    parameters: {
      path: {
        profile_id: number;
      };
    };
    responses: {
      /** Address resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Address.ProfileAddressOutput"];
          "application/ld+json": components["schemas"]["Address.ProfileAddressOutput.jsonld"];
          "text/html": components["schemas"]["Address.ProfileAddressOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Address resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Address.ProfileAddressInput"];
        "application/ld+json": components["schemas"]["Address.ProfileAddressInput.jsonld"];
        "text/html": components["schemas"]["Address.ProfileAddressInput"];
      };
    };
  };
  /** Retrieve an address from a profile. */
  getAddressItem: {
    parameters: {
      path: {
        profile_id: number;
        address_id: number;
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Address resource */
      200: {
        content: {
          "application/json": components["schemas"]["Address.ProfileAddressOutput"];
          "application/ld+json": components["schemas"]["Address.ProfileAddressOutput.jsonld"];
          "text/html": components["schemas"]["Address.ProfileAddressOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update an address of a profile. */
  putAddressItem: {
    parameters: {
      path: {
        profile_id: number;
        address_id: number;
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Address resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Address.ProfileAddressOutput"];
          "application/ld+json": components["schemas"]["Address.ProfileAddressOutput.jsonld"];
          "text/html": components["schemas"]["Address.ProfileAddressOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Address resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Address.ProfileAddressInput"];
        "application/ld+json": components["schemas"]["Address.ProfileAddressInput.jsonld"];
        "text/html": components["schemas"]["Address.ProfileAddressInput"];
      };
    };
  };
  /** Delete an address from a profile. */
  deleteAddressItem: {
    parameters: {
      path: {
        profile_id: number;
        address_id: number;
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Address resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  sale  discounts. */
  "getSale DiscountCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Sale Discount collection */
      200: {
        content: {
          "application/json": components["schemas"]["Sale.Discount.SaleDiscountOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Sale.Discount.SaleDiscountOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Sale.Discount.SaleDiscountOutput"][];
        };
      };
    };
  };
  /** Create a  sale  discount. */
  "postSale DiscountCollection": {
    parameters: {};
    responses: {
      /** Sale Discount resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
          "application/ld+json": components["schemas"]["Sale.Discount.SaleDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Sale Discount resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sale.Discount.SaleDiscountInput"];
        "application/ld+json": components["schemas"]["Sale.Discount.SaleDiscountInput.jsonld"];
        "text/html": components["schemas"]["Sale.Discount.SaleDiscountInput"];
      };
    };
  };
  /** Retrieve a  sale  discount. */
  "getSale DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Sale Discount resource */
      200: {
        content: {
          "application/json": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
          "application/ld+json": components["schemas"]["Sale.Discount.SaleDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  sale  discount. */
  "putSale DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Sale Discount resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
          "application/ld+json": components["schemas"]["Sale.Discount.SaleDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Sale.Discount.SaleDiscountOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Sale Discount resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sale.Discount.SaleDiscountInput"];
        "application/ld+json": components["schemas"]["Sale.Discount.SaleDiscountInput.jsonld"];
        "text/html": components["schemas"]["Sale.Discount.SaleDiscountInput"];
      };
    };
  };
  /** Delete a  sale  discount. */
  "deleteSale DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Sale Discount resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of tax classes. */
  "getTax ClassCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        "order[name]"?: "asc" | "desc";
      };
    };
    responses: {
      /** Tax Class collection */
      200: {
        content: {
          "application/json": components["schemas"]["Tax.Class.TaxClassOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Tax.Class.TaxClassOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Tax.Class.TaxClassOutput"][];
        };
      };
    };
  };
  /** Create a  tax  class. */
  "postTax ClassCollection": {
    parameters: {};
    responses: {
      /** Tax Class resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Tax.Class.TaxClassOutput"];
          "application/ld+json": components["schemas"]["Tax.Class.TaxClassOutput.jsonld"];
          "text/html": components["schemas"]["Tax.Class.TaxClassOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Tax Class resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tax.Class.TaxClassInput"];
        "application/ld+json": components["schemas"]["Tax.Class.TaxClassInput.jsonld"];
        "text/html": components["schemas"]["Tax.Class.TaxClassInput"];
      };
    };
  };
  /** Retrieve a  tax  class. */
  "getTax ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Tax Class resource */
      200: {
        content: {
          "application/json": components["schemas"]["Tax.Class.TaxClassOutput"];
          "application/ld+json": components["schemas"]["Tax.Class.TaxClassOutput.jsonld"];
          "text/html": components["schemas"]["Tax.Class.TaxClassOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  tax  class. */
  "putTax ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Tax Class resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Tax.Class.TaxClassOutput"];
          "application/ld+json": components["schemas"]["Tax.Class.TaxClassOutput.jsonld"];
          "text/html": components["schemas"]["Tax.Class.TaxClassOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Tax Class resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tax.Class.TaxClassInput"];
        "application/ld+json": components["schemas"]["Tax.Class.TaxClassInput.jsonld"];
        "text/html": components["schemas"]["Tax.Class.TaxClassInput"];
      };
    };
  };
  /** Delete a  tax  class. */
  "deleteTax ClassItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Tax Class resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
  /** Retrieve a list of  volume  discounts. */
  "getVolume DiscountCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Volume Discount collection */
      200: {
        content: {
          "application/json": components["schemas"]["Volume.Discount.VolumeDiscountOutput"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Volume.Discount.VolumeDiscountOutput.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "text/html": components["schemas"]["Volume.Discount.VolumeDiscountOutput"][];
        };
      };
    };
  };
  /** Create a  volume  discount. */
  "postVolume DiscountCollection": {
    parameters: {};
    responses: {
      /** Volume Discount resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
          "application/ld+json": components["schemas"]["Volume.Discount.VolumeDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The new Volume Discount resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Volume.Discount.VolumeDiscountInput"];
        "application/ld+json": components["schemas"]["Volume.Discount.VolumeDiscountInput.jsonld"];
        "text/html": components["schemas"]["Volume.Discount.VolumeDiscountInput"];
      };
    };
  };
  /** Retrieve a  volume  discount. */
  "getVolume DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Volume Discount resource */
      200: {
        content: {
          "application/json": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
          "application/ld+json": components["schemas"]["Volume.Discount.VolumeDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
        };
      };
      /** Resource not found */
      404: unknown;
    };
  };
  /** Update a  volume  discount. */
  "putVolume DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Volume Discount resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
          "application/ld+json": components["schemas"]["Volume.Discount.VolumeDiscountOutput.jsonld"];
          "text/html": components["schemas"]["Volume.Discount.VolumeDiscountOutput"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Resource not found */
      404: unknown;
      /** Unprocessable entity */
      422: unknown;
    };
    /** The updated Volume Discount resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Volume.Discount.VolumeDiscountInput"];
        "application/ld+json": components["schemas"]["Volume.Discount.VolumeDiscountInput.jsonld"];
        "text/html": components["schemas"]["Volume.Discount.VolumeDiscountInput"];
      };
    };
  };
  /** Delete a  volume  discount. */
  "deleteVolume DiscountItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Volume Discount resource deleted */
      204: never;
      /** Resource not found */
      404: unknown;
    };
  };
}

export interface external {}